5">Tivian Management UI</h2><p><strong>What is it?</strong></p><p>Setting up applications with Tivian Access is complex and involves multiple steps. This can be enhances by putting this in an own system that takes care of Okta and give an admin UI that triggers creating resources in Okta. Such an API could also provide configuration for the installations. This configuration is currently managed by every EFS installation and will be pushed to Okta.</p><p>More concrete:</p><ul>
<li><p>UI for setting up EFS installation → this will also immediately set the correct config fields in Okta and the respective EFS installation</p></li>
<li><p>Creating Portals will trigger a task in the Management UI system that also creates the neccessary config</p></li>
<li><p>The UI might be directly integrated in EFS Admin as an iframe or as it’s own service</p></li>
<li><p>Setup wizzard instead of complex documentation</p></li>
<li><p>Monitoring of used APIs, limits, errors</p></li>
<li><p>Error handling, error transformation</p></li>
</ul><p></p><p><strong>Why do we need it? What are the benefits?</strong></p><p>This might lower complexity for EFS and support and also decrease future development cost.</p><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><h2 id="header-6">Self Service for Identities (low priority, wait for use cases to implement that)</h2><p><strong>What is it?</strong></p><p>User do have a few values stored in Okta. This involves first name, last name, email adress and also multi factor information. These values can be made self-service-changeable. Other system are then able to react to those changes and adapt their resources.</p><p>More concrete:</p><ul>
<li><p>enable self-service factor reset</p></li>
<li><p>enable self-services changing first-name, last-name and email adress in case the user is not an IdP user</p></li>
<li><p>get rid of mapping via email adress and allow other kinds of user names (this depends on other tasks in user management)</p></li>
</ul><p></p><p><strong>Why do we need it? What are the benefits?</strong></p><p>We can enable the following features and decrease support cost:</p><ul>
<li><p>Self service</p></li>
<li><p>MFA reset</p></li>
<li><p>Allow mappings other than email</p></li>
</ul><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><h2 id="header-7">What are the challenges for these solutions?</h2><p>All of these solutions involve setting up a new system that acts as facade for Okta. This involves some minor architectual task but far more important maintaining such a system. Therefore we are bound to maintain this solution long term.</p><p></p><img src="https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/20716878597522" alt="Beyond MVP(1).png"><p><a href="https://www.lucidchart.com/documents/edit/106358dd-8ca6-4a53-976c-7b477fc24b97/0_0">https://www.lucidchart.com/documents/edit/106358dd-8ca6-4a53-976c-7b477fc24b97/0_0</a></p><p></p><h3 id="header-9">General architectural benefits (also with regards to User Management):</h3><p><strong>Encaspulation:</strong></p><p>Every Application now has to take care of Okta. In case Okta changes something or we are not going with Okta anymore, every application has to be changed. To avoid this a common pattern is to encapsulate Okta from the applications itself.</p><p></p><p><strong>Communication:</strong></p><p>There is a concept of hooks in Okta. That might be used to trigger communication from Okta to our other services. But if we want to have a more fine-grained controll of the communication we could communicate from our Okta Adapter to other services and also the other way around.</p><p>From an IT perspective we are encouraged to use an asynchronous, event driven concept of communication. Thus we have to anyways build an adapter for that.</p><p></p><p><strong>Customization:</strong></p><p>Currently we are not able to to self service or show other UIs to customers because we are not able to brand Okta like Tivian. An Adapter with it’s own UI would enable us to develop user interfaces for our customers (and also for us).</p><p></p><h2 id="header-11">Cleanup</h2><p>There are some point we developed that are not yet finished or are not feasable for a long-term production environment.</p><p>Following is a list of general topics that can be improved:</p><ul>
<li><p>multiple aliases</p></li>
<li><p>UI/UX/wording improvements</p></li>
<li><p>Session/multi-browser/existing sessions cleanup</p></li>
<li><p>Email notifications</p></li>
</ul><p></p><h2