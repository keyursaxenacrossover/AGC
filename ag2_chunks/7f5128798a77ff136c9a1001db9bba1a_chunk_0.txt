<h1 id="h_01HGKSMPRS9JVGC6E9EA3DB98K" class="wysiwyg-text-align-justify">Overview</h1>
<p class="wysiwyg-text-align-justify">This article provides a comprehensive guide on LUA scripting in EFS (Enterprise Feedback Suite). It covers the basics of LUA scripting, EFS-specific functions, and practical examples for implementing LUA in surveys.</p>
<h1 id="h_01HGKSMPRSYYE7GMM7DZ0VCKXK" class="wysiwyg-text-align-justify">Information</h1>
<p class="wysiwyg-text-align-justify">LUA scripting in EFS offers advanced functionality for survey filters and question types, allowing users with programming skills to create more flexible and powerful surveys.</p>
<ul class="wysiwyg-text-align-justify">
<li><a href="#lua-cheat-sheet">LUA Cheat Sheet</a></li>
<li><a href="#efs-specific-functions-in-lua-filters-and-lua-question-type">EFS specific functions in LUA filters and LUA question type</a></li>
<li><a href="#examples-for-lua-in-efs">Examples for LUA in EFS</a></li>
<li><a href="#my-code-is-not-working-what-should-i-do">Troubleshooting</a></li>
<li><a href="#useful-lua-resources">Useful LUA resources</a></li>
</ul>
<p class="wysiwyg-text-align-justify">LUA scripting in EFS Survey filters and the LUA question type offer users with programming skills more flexibility and convenience. The LUA question type, found in "Advanced", provides an efficient scripting interface to the survey environment, allowing users to easily recoding of the survey's variables, execution of complex calculations, verification or processing of user input, and extended quota calculations. The question type provides two code boxes, the first one is executed before sending the page to the participant, and the second code box is executed when a user submits the page containing the LUA question type. You can also include your own function libraries from the media library (global or project-specific, text files with the extension .txt or .lua), allowing you to reuse frequently used functions across projects. Hiding conditions can be employed and you may define whether the script should be executed every time the page is called or only once (e.g. when using a page trigger or the back button).</p>
<p class="wysiwyg-text-align-justify"><img src="https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21015359149842" alt="lua_qt_en.png"></p>
<p class="wysiwyg-text-align-justify">Many filters that need a lot of effort when working with EFS standard filter definitions or alternative filter conditions can be realized more easily with the LUA filters. E.g. a function is available that simplifies handling of system missings in filter conditions.</p>
<p class="wysiwyg-text-align-justify">This manual presents examples of frequent scenarios when programming with LUA in EFS and is not intended to be a general introduction to LUA, for which several good resources exist <em>[</em><a href="https://www.lua.org/manual/5.1/"><em>https://www.lua.org/manual/5.1/</em></a><em>, </em><a href="https://www.lua.org/pil/contents.html"><em>https://www.lua.org/pil/contents.html</em></a><em>].</em></p>
<p class="wysiwyg-text-align-justify">EFS Survey uses LUA Version 5.1 in its LUA filters and LUA question type and provides access to almost all default LUA libraries. For security reasons, functions dofile, load, loadfile, print, require, rawequal, rawget and rawest and the os library are not available in the LUA environment. The functions os.date and os.time are available as <em>date</em> and <em>time.</em> The function mb_strlen is available as <em>string.len.</em></p>
<p class="wysiwyg-text-align-justify">Access to the Lrexlib is possible and allows advanced Regular Expressions within the LUA environment to search, validate or extract user input, for example, rex_pcre.find (v_1, "\\bhate") will search for words starting with hate and return false if none is found. The full documentation on rex_pcre can be found in the Lrexlib reference manual.</p>
<p class="wysiwyg-text-align-justify">Survey variables are available within the LUA environment, which is accessible under the _G global table. Most variables are therefore accessible through this global table, e.g. by using _G["v_1"] or _G["code"]. Survey variables (v_xxx) are also injected into the LUA sandbox as regular variables, therefore _G["v_1"] == v_1.</p>
<h2 id="lua-cheat-sheet" class="wysiwyg-text-align-justify"><strong>LUA Cheat Sheet</strong></h2>
<p class="wysiwyg-text-align-justify">Please see <a href="https://www.lua.org/manual/5.1/">https://www.lua.org/manual/5.1/</a> and <a href="https://www.lua.org/pil/contents.html">https://www.lua.org/pil/contents.html</a> for full documentation.</p>
<p class="wysiwyg-text-align-justify"> </p>
<h4 id="comments" class="wysiwyg-text-align-justify">Comments