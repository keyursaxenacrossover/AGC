{
    "id": 21013691934482,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/21013691934482.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/21013691934482-Troubleshooting-Potential-SQL-Injection-Breach-WIP",
    "author_id": 1904316023094,
    "comments_disabled": false,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20234751255186,
    "created_at": "2024-08-28T09:09:27Z",
    "updated_at": "2024-09-02T15:40:10Z",
    "name": "Troubleshooting Potential SQL Injection Breach (WIP)",
    "title": "Troubleshooting Potential SQL Injection Breach (WIP)",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-09-02T15:40:07Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [
        "Troubleshooting",
        "SQL",
        "Website Security",
        "Data Breach",
        "Injection Attack"
    ],
    "body": "<h1 id=\"h_01J6C3YSBNECY6KVQ7MQQAHHFB\">Overview</h1>\n<p>This article provides guidance on investigating a potential SQL injection attack on a specific instance. SQL injection is a common attack vector where malicious SQL code is inserted into input fields to manipulate a backend database, potentially leading to data breaches or unauthorized access. This guide outlines the steps to determine whether an SQL injection attempt was successful and to assess any potential data breaches.</p>\n<h1 id=\"h_01J6C3YSBNP8DTMYVAESD56RKD\">Solution</h1>\n<p>Follow these steps to investigate a reported SQL injection attempt on a specific instance:<br><span class=\"wysiwyg-color-black70\"><em>Note: This is WIP, since actual AWS access is in progress</em></span></p>\n<ol>\n<li>\n<strong>Identify the used database for the mentioned installation</strong>\n<ol>\n<li>Open <a href=\"https://globis.3uu.de/login.php3\">Globis</a> and search for the installation</li>\n<li>Check the DB Host Name:<br><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21016227992722\">\n</li>\n<li>\n<p>Connect to CloudWatch to analyze the attempted SQL injection code present in the logs.<br><br></p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>Identify Suspicious SQL Code in Logs</strong><br>Start by reviewing server logs or application logs where SQL queries are recorded. <br>In AWS Cloudwatch, use specific queries to filter logs that may contain suspicious SQL code (if the request has sample code being injected, use that in the search). <br>For example (assuming installation name is <code>e0080</code> , and injected query includes <code>SLEEP</code> command):</p>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium\">\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-sql\">fields <span class=\"hljs-variable\">@timestamp</span>, <span class=\"hljs-variable\">@message</span><br><span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> <span class=\"hljs-variable\">@message</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-operator\">/ee0080</span><span class=\"hljs-operator\">/</span>\n<br><span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> <span class=\"hljs-variable\">@message</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-operator\">/</span>sleep<span class=\"hljs-operator\">/</span>\n<br><span class=\"hljs-operator\">|</span> sort <span class=\"hljs-variable\">@timestamp</span> <span class=\"hljs-keyword\">asc</span>\n<br><span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">10000</span>\n</code></div>\n</div>\n<p> </p>\n</li>\n<li>\n<p><strong>Verify Database Integrity</strong><br>If the queries found are harmless (no insert/update/delete effect), log into the database through a secure gateway and manually execute the suspicious queries to determine their effect. <br>For example, if the SQL injection attempt involves a query like:</p>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium\">\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> id <span class=\"hljs-keyword\">FROM</span> table_name <span class=\"hljs-keyword\">WHERE</span> title<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'if(now()=sysdate(),sleep(15),0)'</span> LIMIT <span class=\"hljs-number\">1</span>;\n</code></div>\n</div>\n<p>Execute this query safely to observe its behavior (note that <code class=\"!whitespace-pre hljs language-sql\"><span class=\"hljs-string\">sleep(15)</span></code> is a harmless query). <br>In this example, a result in less than 1 second indicates the query with injected code did not execute the injected code. Similarly, confirm the injected code doesn't manipulate or access unauthorized data, suggesting the SQL injection was not successful.<br><br></p>\n</li>\n<li>\n<p><strong>Review Application Front-End Security</strong><br>Evaluate the accessibility of the input forms used for the attack. <br>If the form used for the attach is public (without login prerequisite), ensure it is protected with security measures such as CAPTCHA, which can help distinguish between human users and automated bots, thereby reducing the risk of automated SQL injection attacks.</p>\n</li>\n<li>\n<strong>Check the code inserted as text through GUI</strong><br>If possible, check the GUI for the code injected as text. If the injection fails, the code will be displayed normally in the text field; however if the text containing the code is truncated, this might imply a possible injection.<br>In the below example, the breach was targeting the contact request form, so we can check the data on GUI through People -&gt; Contacts:<br><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21016213274770\"><br>Injected code is there in the text, which implies the code was not executed, and thus the breach was not successful.</li>\n</ol>\n<h2 id=\"h_01J5AK3WZR1VTWSZCVHAXXW5NP\" style=\"box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, ' Segoe UI' , Helvetica, Arial, sans-serif; margin-top: 0px; font-size: 2rem; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; color: #212529; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\">Summary</h2>\n<p>An SQL injection investigation should confirm whether injected SQL code was executed or stored as text and ensure no data breaches occurred.</p>\n<h1 id=\"h_01J5AK3WZRPZQJA90DZT0W9JMN\" style=\"box-sizing: border-box; font-size: 2.5rem; margin: 0px 0px 0.5rem; font-family: -apple-system, BlinkMacSystemFont, ' Segoe UI' , Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.2; color: #212529; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\">\n<br>FAQ</h1>\n<ol>\n<li>\n<p><strong>What is an SQL injection attack?</strong><br>An SQL injection is a technique where an attacker inserts malicious SQL code into an input field to manipulate a backend database, potentially gaining unauthorized access or extracting sensitive data.</p>\n</li>\n<li>\n<strong>What role does CAPTCHA play in preventing attacks?</strong><br>CAPTCHA is a security measure used to differentiate between human and automated access to a website. It helps prevent automated attacks, including SQL injections, by requiring users to solve challenges that are difficult for automated systems to solve.</li>\n</ol>",
    "user_segment_ids": [
        360000084973
    ]
}