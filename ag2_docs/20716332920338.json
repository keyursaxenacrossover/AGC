{
    "id": 20716332920338,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20716332920338.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20716332920338-Authentication-Method",
    "author_id": 369584192734,
    "comments_disabled": false,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20714711445138,
    "created_at": "2024-08-12T18:58:07Z",
    "updated_at": "2024-08-29T09:12:34Z",
    "name": "Authentication Method",
    "title": "Authentication Method",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-08-29T09:12:32Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<h1 id=\"h_01J6EP81ZSN4QJCK5ZK2F3TK6Q\">Overview</h1>\n<p>This guide provides a comprehensive introduction to key authentication concepts and mechanisms used in secure systems, particularly in the context of Okta and related technologies.</p>\n<p> </p>\n<ul>\n<li><a href=\"#header-1\">SSO - Single Sign On</a></li>\n<li><a href=\"#01J6ENBWCW8163RTE59P7CBGTV\">MFA - Multi-Factor Authentication</a></li>\n<li><a href=\"#01J6ENET6R1KESH2NG86WG3MA1\">Federation/Federated Authentication</a></li>\n<li><a href=\"#01J6ENJFHTBY3V2JQH1VB7C2F0\">Open ID Connect Tokens</a></li>\n</ul>\n<p> </p>\n<h2 id=\"header-1\">SSO - Single Sign On</h2>\n<p>A user has to log in once in one context (browser, smartphone, operating system). If the user is authenticated in one app the user is also authenticated in another app in that context.</p>\n<p>Example: I log in to GMail in Mozilla, I navigate to Google Docs → I am already logged in at Google Docs</p>\n<p><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21036388065938\"></p>\n<p> </p>\n<h2 id=\"01J6ENBWCW8163RTE59P7CBGTV\">MFA - Multi-Factor Authentication</h2>\n<p>A user needs more than one factor to login. This strengthens the assumption, that the one trying to log in is really the user, that is expected.</p>\n<p>Example: (2-Factor-Authentication) If I log in to AWS I need to provide my username and password as well as a code that is sent to my smartphone. There I prove that I not only know the username and password combination but am also the owner of the user's phone.</p>\n<p><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21036388067346\"></p>\n<p> </p>\n<h2 id=\"01J6ENET6R1KESH2NG86WG3MA1\">Federation/Federated Authentication</h2>\n<p>Federated Authentication is when the user is sent to another Identity Provider for the authentication process.</p>\n<p>The benefits of this are that the credentials of the user are managed and known in only one place (the federated external Identity Provider).</p>\n<p><strong>Example: </strong>A client (e.g: Coca Cola) has its own Identity Provider in place. They federate with our Identity Provider and Coca Cola Employees can sign into EFS using their corporate credentials. If they change their password it has to be only done once on Coca Cola side. They also use these credentials for their intranet/tools, so they will not forget their credentials.</p>\n<p><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21036388069010\"></p>\n<p> </p>\n<h2 id=\"01J6ENJFHTBY3V2JQH1VB7C2F0\">Open ID Connect Tokens</h2>\n<p>The IdP will create the access token with some basic information about the user to give applications the possibility to check whether a user is allowed to access a resource.</p>\n<p> </p>\n<p>The Access token is a JWT token that has to be validated by a server component. At least the following field should be validated:</p>\n<ul>\n<li>\n<p><strong>Signature:</strong> Every JWT has a signature that can be validated with the information in the header of the JWT as well as public secrets that can be retrieved from the well-known/discovery route of the IdP</p>\n</li>\n<li>\n<p><strong>Audience (JWT name: aud):</strong> The audience has to match the application that requested the token.</p>\n</li>\n<li>\n<p><strong>Expiration Time (JWT name: nbf, exp)</strong>: Check if the token is not valid from a time perspective. nbf (not-before) will give a hint when the token starts to be valid and exp (expires in) give a hint when the token expires.</p>\n</li>\n<li>\n<p><strong>Issuer (JWT name: iss):</strong> This will be the specific Azure AD B2C App that issued the token. It will therefore start with the B2C domain and subdomain followed by the ID of the App Registration that is connected to Azure B2C.</p>\n</li>\n<li>\n<p><strong>Nonce (JWT name: nonce):</strong> The nonce should be set in the authentication request and will be the same value in the authentication response. This should be checked. If possible just use some random value.</p>\n</li>\n</ul>\n<p>There should also be an \"<strong>acr</strong>\" claim that describes the flow the user used to authenticate. It can be read to identify the specific flow.</p>\n<p> </p>\n<p> </p>",
    "user_segment_ids": [
        360000084973
    ]
}