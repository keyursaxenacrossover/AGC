{
    "id": 20716878477586,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20716878477586.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20716878477586-MERGE-CANDIDATE-Tivian-Access-Enhance",
    "author_id": 369584192734,
    "comments_disabled": false,
    "draft": true,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20714711445138,
    "created_at": "2024-08-12T19:50:31Z",
    "updated_at": "2024-08-12T19:50:42Z",
    "name": "MERGE CANDIDATE Tivian Access - Enhance",
    "title": "MERGE CANDIDATE Tivian Access - Enhance",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-08-12T19:50:42Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<p><b>Original Confluence URL:</b> <a href=\"https://qbdocs.atlassian.net/wiki/spaces/IAM/pages/1169129540\">https://qbdocs.atlassian.net/wiki/spaces/IAM/pages/1169129540</a> - please cross-check the quality of the ZD article with the Confluence counterpart and remove this line before publishing the ZD article</p>\n\n<h2>Table of Contents</h2>\n<ul class=\"toc\">\n<ul>\n<li><a href=\"#header-1\">Tivian Access features beyond MVP.</a></li>\n<ul>\n<li><a href=\"#header-3\">Identity/User Management UI</a></li>\n<li><a href=\"#header-4\">Identity Management API</a></li>\n<li><a href=\"#header-5\">Tivian Management UI</a></li>\n<li><a href=\"#header-6\">Self Service for Identities (low priority, wait for use cases to implement that)</a></li>\n<li><a href=\"#header-7\">What are the challenges for these solutions?</a></li>\n<ul>\n<li><a href=\"#header-9\">General architectural benefits (also with regards to User Management):</a></li>\n</ul>\n<li><a href=\"#header-11\">Cleanup</a></li>\n<li><a href=\"#header-12\">Tasks:</a></li>\n<li><a href=\"#header-13\">Story Skeletons:</a></li>\n<li><a href=\"#header-14\">Technical Notes and ideas:</a></li>\n</ul>\n</ul>\n</ul><ac:rich-text-body><p>This page could be split and put in the milestone plan on the one hand and the backlog of IAM on the other hand.</p></ac:rich-text-body><p></p><h1 id=\"header-1\">Tivian Access features beyond MVP.</h1><ac:parameter ac:name=\"minLevel\">2</ac:parameter><p></p><p></p><p><strong>Possible epics:</strong></p><ul>\n<li><p>Support the support</p></li>\n<li><p>Self Service</p></li>\n<li><p>Okta Dependency</p></li>\n</ul><p></p><h2 id=\"header-3\">Identity/User Management UI</h2><p><strong>What is it?</strong></p><p>Currently we can only change users using the Okta UI. But this UI is too complex for normal tasks a user-manager would do. And it is also not very aligned with the way we are using Okta (multi-tenant). We should provide a UI that shows exactly the use cases that are present at Tivian. </p><p><strong>Why do we need it? What are the benefits?</strong></p><p>The Identity Management UI will hide Okta from our support and simplify identity management. This is a feature to reduce cost on the support teams (complexity and error rate) and is used mostly internally.</p><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><h2 id=\"header-4\">Identity Management API</h2><p><strong>What is it?</strong></p><p>EFS currently handles API-Limits from Okta as well as other drawbacks of the Okta API. This has to be implemented in every application that uses Tivian Access.</p><p>More concrete:</p><ul>\n<li><p>bulk operations in portals are mapped to whatever Okta can handle</p></li>\n<li><p>API limits are respected by default</p></li>\n<li><p>Monitoring of used APIs, limits, errors</p></li>\n<li><p>Error handling, error transformation</p></li>\n</ul><p></p><p><strong>Why do we need it? What are the benefits?</strong></p><p>It will safe cost in future development because there is a single point where we can integrate against with EFS and other applications.</p><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><p></p><h2 id=\"header-5\">Tivian Management UI</h2><p><strong>What is it?</strong></p><p>Setting up applications with Tivian Access is complex and involves multiple steps. This can be enhances by putting this in an own system that takes care of Okta and give an admin UI that triggers creating resources in Okta. Such an API could also provide configuration for the installations. This configuration is currently managed by every EFS installation and will be pushed to Okta.</p><p>More concrete:</p><ul>\n<li><p>UI for setting up EFS installation → this will also immediately set the correct config fields in Okta and the respective EFS installation</p></li>\n<li><p>Creating Portals will trigger a task in the Management UI system that also creates the neccessary config</p></li>\n<li><p>The UI might be directly integrated in EFS Admin as an iframe or as it’s own service</p></li>\n<li><p>Setup wizzard instead of complex documentation</p></li>\n<li><p>Monitoring of used APIs, limits, errors</p></li>\n<li><p>Error handling, error transformation</p></li>\n</ul><p></p><p><strong>Why do we need it? What are the benefits?</strong></p><p>This might lower complexity for EFS and support and also decrease future development cost.</p><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><h2 id=\"header-6\">Self Service for Identities (low priority, wait for use cases to implement that)</h2><p><strong>What is it?</strong></p><p>User do have a few values stored in Okta. This involves first name, last name, email adress and also multi factor information. These values can be made self-service-changeable. Other system are then able to react to those changes and adapt their resources.</p><p>More concrete:</p><ul>\n<li><p>enable self-service factor reset</p></li>\n<li><p>enable self-services changing first-name, last-name and email adress in case the user is not an IdP user</p></li>\n<li><p>get rid of mapping via email adress and allow other kinds of user names (this depends on other tasks in user management)</p></li>\n</ul><p></p><p><strong>Why do we need it? What are the benefits?</strong></p><p>We can enable the following features and decrease support cost:</p><ul>\n<li><p>Self service</p></li>\n<li><p>MFA reset</p></li>\n<li><p>Allow mappings other than email</p></li>\n</ul><p>Is will also give more flexibility in changing the Identity Provider at a later point in time (vendor lock).</p><p></p><h2 id=\"header-7\">What are the challenges for these solutions?</h2><p>All of these solutions involve setting up a new system that acts as facade for Okta. This involves some minor architectual task but far more important maintaining such a system. Therefore we are bound to maintain this solution long term.</p><p></p><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/20716878597522\" alt=\"Beyond MVP(1).png\"><p><a href=\"https://www.lucidchart.com/documents/edit/106358dd-8ca6-4a53-976c-7b477fc24b97/0_0\">https://www.lucidchart.com/documents/edit/106358dd-8ca6-4a53-976c-7b477fc24b97/0_0</a></p><p></p><h3 id=\"header-9\">General architectural benefits (also with regards to User Management):</h3><p><strong>Encaspulation:</strong></p><p>Every Application now has to take care of Okta. In case Okta changes something or we are not going with Okta anymore, every application has to be changed. To avoid this a common pattern is to encapsulate Okta from the applications itself.</p><p></p><p><strong>Communication:</strong></p><p>There is a concept of hooks in Okta. That might be used to trigger communication from Okta to our other services. But if we want to have a more fine-grained controll of the communication we could communicate from our Okta Adapter to other services and also the other way around.</p><p>From an IT perspective we are encouraged to use an asynchronous, event driven concept of communication. Thus we have to anyways build an adapter for that.</p><p></p><p><strong>Customization:</strong></p><p>Currently we are not able to to self service or show other UIs to customers because we are not able to brand Okta like Tivian. An Adapter with it’s own UI would enable us to develop user interfaces for our customers (and also for us).</p><p></p><h2 id=\"header-11\">Cleanup</h2><p>There are some point we developed that are not yet finished or are not feasable for a long-term production environment.</p><p>Following is a list of general topics that can be improved:</p><ul>\n<li><p>multiple aliases</p></li>\n<li><p>UI/UX/wording improvements</p></li>\n<li><p>Session/multi-browser/existing sessions cleanup</p></li>\n<li><p>Email notifications</p></li>\n</ul><p></p><h2 id=\"header-12\">Tasks:</h2><ul>\n<li><p>Clarify environment to work in (kubernetes cluster/registries/pipelines)</p></li>\n<li><p>Clarify secret management → how are Okta secrets stored?</p></li>\n<li><p>Create concepts for UI integration</p></li>\n</ul><h2 id=\"header-13\">Story Skeletons:</h2><p></p><p><strong><del>API support for Okta tenant</del></strong></p><p><del>As a Tivian support employee</del><br><del>I want to create all resources for one tenant in one API call</del><br><del>in order to avoid manually creating multiple resources in Okta for one tenant</del></p><p></p><p><strong><del>Automatic tenant configuration</del></strong></p><p><del>As a Tivian support employee</del><br><del>I don’t want to create configuration values for an Okta tenant manually</del><br><del>in order to avoid errors while copying values from Okta to the installation</del></p><p></p><p><strong><del>API support for EFS Okta application</del></strong></p><p><del>As a Tivian support employee</del><br><del>I want to create all resources for one EFS application in one API call</del><br><del>in order to avoid manually creating multiple resources in Okta for EFS</del></p><p></p><p><strong><del>Automatic EFS configuration</del></strong></p><p><del>As a Tivian support employee</del><br><del>I don’t want to create configuration values for an EFS installation in EFS manually</del><br><del>in order to avoid errors while copying values from Okta to the installation</del></p><p></p><p><strong>API support for DV Okta application </strong><ac:parameter ac:name=\"title\">wait for DV to be implemented and Documented</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a Tivian support employee<br>I want to create all resources for one DV application in one API call<br>in order to avoid manually creating multiple resource in Okta for DV</p><p></p><p><strong>Automatic DV configuration </strong><ac:parameter ac:name=\"title\">wait for DV to be implemented and Documented</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a Tivian support employee<br>I don’t want to create configuration values for an DV installation in DV manually<br>in order to avoid errors while copying values from Okta to the DV instance</p><p></p><p><strong>UI for creating Okta tenant resources </strong><ac:parameter ac:name=\"title\">Wait for feedback on the APIs</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a Tivian support employee<br>I want to create resources for one tenant from a UI<br>in order to get a better overview of the available values and configuration options</p><p><strong>UI for creating Okta EFS resources</strong></p><p><strong>UI for creating Okta DV resources</strong></p><p><strong>UI for updating and deleting Okta tenant resources</strong></p><p><strong>UI for updating and deleting Okta EFS resources</strong></p><p><strong>UI for updating and deleting Okta DV resources</strong></p><p><strong>UI for an overview of Okta tenant resources</strong></p><p><strong>UI for an overview of Okta EFS resources</strong></p><p><strong>UI for an overview of Okta DV resources</strong></p><p></p><p><u>Disclaimer: There might be more tickets in case features of Okta like MFA or others should be enabled one by one and not within one story!</u></p><p></p><p><strong>API and UI for CRUD operations for Okta Portals resources</strong></p><p>As a Tivian developer<br>I want to avoid implementing Okta API interfaces in Portals (backend)<br>in order to avoid changes in Portals when the Okta API changes</p><p></p><p><strong>Okta Status view for users </strong><ac:parameter ac:name=\"title\">Align with User Management</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a Tivian support employee<br>I want to see the current Okta status of a user<br>in order to check if a user is able to login or report the status of user</p><p></p><p><strong>Okta lifecycle operations </strong><ac:parameter ac:name=\"title\">clarify what lifecycle actions</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a Tivian support employee<br>I want to perform lifecycle operations on a user<br>in order to change the status of a user in the Tivian products</p><p></p><p><strong>Create a scoped view for our clients</strong></p><p>As a client’s admin user<br>I want to get scoped access to the users that belong to my tenant<br>in order to manage a user’s Okta life cycle on my own</p><p></p><p><strong>Enabling queued bulk imports </strong><ac:parameter ac:name=\"title\">Align with user management</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a client’s admin user<br>I want to upload masses of users without waiting for the result<br>in order to upload an arbitrary amount of users without being blocked</p><p></p><p><strong>Enabling queued bulk updates and deletions </strong><ac:parameter ac:name=\"title\">Align with user management</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a client’s admin user<br>I want to upload masses of users without waiting for the result<br>in order to upload an arbitrary amount of users without being blocked</p><p></p><p><strong>Self Service </strong><ac:parameter ac:name=\"title\">too big for being a story</ac:parameter><ac:parameter ac:name=\"colour\">Yellow</ac:parameter> </p><p>As a client’s user<br>I want to reset MFA (OTHERS?)<br>in order to manage MFA settings on my own</p><p></p><p><strong>Monthly report of business metrics via email </strong><ac:parameter ac:name=\"title\">Clarify with PO</ac:parameter><ac:parameter ac:name=\"colour\">Red</ac:parameter> </p><p>As a Tivian business owner<br>I want to get monthly business metrics<br>in order to take decisions for IAM based on these metrics</p><ac:task-list>\n<ac:task>\n<ac:task-id>1</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span class=\"placeholder-inline-tasks\"><ac:link><ri:user ri:userkey=\"8a7f80856412af8a016412fb8b10003f\"></ri:user></ac:link>  think about that</span></ac:task-body>\n</ac:task>\n</ac:task-list><p></p><h2 id=\"header-14\">Technical Notes and ideas:</h2><ul>\n<li><p>Kind of UI integration?! → iframe, custom elements, link</p></li>\n<li><p>HA Caching/Queuing mechanism?! what is possible</p></li>\n<li><p>Component Library</p></li>\n<li><p>Config push/pull principle → config für EFS/Portals etc. kommt aus unserem system</p></li>\n</ul><p></p><p></p><p></p><p>Personal notes from <ac:link><ri:user ri:userkey=\"8a7f8086694ab91b01694cfe74ed0066\"></ri:user></ac:link> </p><ul>\n<li><p>Run services in Kubernetes, use helm (dev environment?!)</p></li>\n<li><p>Create a build pipeline (in concourse?)</p></li>\n<li><p>Create NodeJS services</p></li>\n<li><p>Is a HA Caching DB neccessary? For buffering operations?</p></li>\n<li><p>Connect Service to Kafka (may that remove bulk operations?)</p></li>\n<li><p>Develop UI in VueJS (check if a component library does make sense)</p></li>\n</ul><p></p><p></p>",
    "user_segment_ids": [
        360000084973
    ]
}