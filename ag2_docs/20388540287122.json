{
    "id": 20388540287122,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20388540287122.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20388540287122-How-to-LUA-scripting-in-EFS",
    "author_id": 369584192734,
    "comments_disabled": true,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20234774909202,
    "created_at": "2024-07-26T14:22:57Z",
    "updated_at": "2024-08-28T10:08:41Z",
    "name": "How-to: LUA scripting in EFS",
    "title": "How-to: LUA scripting in EFS",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-07-26T14:42:57Z",
    "user_segment_id": null,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<h1 id=\"h_01HGKSMPRS9JVGC6E9EA3DB98K\" class=\"wysiwyg-text-align-justify\">Overview</h1>\n<p class=\"wysiwyg-text-align-justify\">This article provides a comprehensive guide on LUA scripting in EFS (Enterprise Feedback Suite). It covers the basics of LUA scripting, EFS-specific functions, and practical examples for implementing LUA in surveys.</p>\n<h1 id=\"h_01HGKSMPRSYYE7GMM7DZ0VCKXK\" class=\"wysiwyg-text-align-justify\">Information</h1>\n<p class=\"wysiwyg-text-align-justify\">LUA scripting in EFS offers advanced functionality for survey filters and question types, allowing users with programming skills to create more flexible and powerful surveys.</p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li><a href=\"#lua-cheat-sheet\">LUA Cheat Sheet</a></li>\n<li><a href=\"#efs-specific-functions-in-lua-filters-and-lua-question-type\">EFS specific functions in LUA filters and LUA question type</a></li>\n<li><a href=\"#examples-for-lua-in-efs\">Examples for LUA in EFS</a></li>\n<li><a href=\"#my-code-is-not-working-what-should-i-do\">Troubleshooting</a></li>\n<li><a href=\"#useful-lua-resources\">Useful LUA resources</a></li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\">LUA scripting in EFS Survey filters and the LUA question type offer users with programming skills more flexibility and convenience. The LUA question type, found in \"Advanced\", provides an efficient scripting interface to the survey environment, allowing users to easily recoding of the survey's variables, execution of complex calculations, verification or processing of user input, and extended quota calculations. The question type provides two code boxes, the first one is executed before sending the page to the participant, and the second code box is executed when a user submits the page containing the LUA question type. You can also include your own function libraries from the media library (global or project-specific, text files with the extension .txt or .lua), allowing you to reuse frequently used functions across projects. Hiding conditions can be employed and you may define whether the script should be executed every time the page is called or only once (e.g. when using a page trigger or the back button).</p>\n<p class=\"wysiwyg-text-align-justify\"><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21015359149842\" alt=\"lua_qt_en.png\"></p>\n<p class=\"wysiwyg-text-align-justify\">Many filters that need a lot of effort when working with EFS standard filter definitions or alternative filter conditions can be realized more easily with the LUA filters. E.g. a function is available that simplifies handling of system missings in filter conditions.</p>\n<p class=\"wysiwyg-text-align-justify\">This manual presents examples of frequent scenarios when programming with LUA in EFS and is not intended to be a general introduction to LUA, for which several good resources exist <em>[</em><a href=\"https://www.lua.org/manual/5.1/\"><em>https://www.lua.org/manual/5.1/</em></a><em>, </em><a href=\"https://www.lua.org/pil/contents.html\"><em>https://www.lua.org/pil/contents.html</em></a><em>].</em></p>\n<p class=\"wysiwyg-text-align-justify\">EFS Survey uses LUA Version 5.1 in its LUA filters and LUA question type and provides access to almost all default LUA libraries. For security reasons, functions dofile, load, loadfile, print, require, rawequal, rawget and rawest and the os library are not available in the LUA environment. The functions os.date and os.time are available as <em>date</em> and <em>time.</em> The function mb_strlen is available as <em>string.len.</em></p>\n<p class=\"wysiwyg-text-align-justify\">Access to the Lrexlib is possible and allows advanced Regular Expressions within the LUA environment to search, validate or extract user input, for example, rex_pcre.find (v_1, \"\\\\bhate\") will search for words starting with hate and return false if none is found. The full documentation on rex_pcre can be found in the Lrexlib reference manual.</p>\n<p class=\"wysiwyg-text-align-justify\">Survey variables are available within the LUA environment, which is accessible under the _G global table. Most variables are therefore accessible through this global table, e.g. by using _G[\"v_1\"] or _G[\"code\"]. Survey variables (v_xxx) are also injected into the LUA sandbox as regular variables, therefore _G[\"v_1\"] == v_1.</p>\n<h2 id=\"lua-cheat-sheet\" class=\"wysiwyg-text-align-justify\"><strong>LUA Cheat Sheet</strong></h2>\n<p class=\"wysiwyg-text-align-justify\">Please see <a href=\"https://www.lua.org/manual/5.1/\">https://www.lua.org/manual/5.1/</a> and <a href=\"https://www.lua.org/pil/contents.html\">https://www.lua.org/pil/contents.html</a> for full documentation.</p>\n<p class=\"wysiwyg-text-align-justify\"> </p>\n<h4 id=\"comments\" class=\"wysiwyg-text-align-justify\">Comments</h4>\n<pre><code class=\"language-text\">-- comment\n--[[ Multiline\ncomment ]] </code></pre>\n<h4 id=\"variables\" class=\"wysiwyg-text-align-justify\">Variables</h4>\n<pre><code class=\"language-text\">local x = 2\nx, y = 2, 4</code></pre>\n<h4 id=\"tables-arrays\" class=\"wysiwyg-text-align-justify\">Tables/arrays</h4>\n<pre><code class=\"language-text\">t = {}\nt = { a = 1, b = 2 }\nt.a = function() ... end -- tables can also contain functions\nt = { [\"hello\"] = 200 }\nt.hello\n-- arrays are also tables:\narray = { \"a\", \"b\", \"c\", \"d\" }\nsetVariableValue(\"v_1\",array[2]) -- \"b\"\nsetVariableValue(\"v_2\",#array) -- returns size of array (here: 4)</code></pre>\n<h4 id=\"conditions\" class=\"wysiwyg-text-align-justify\">Conditions</h4>\n<pre><code class=\"language-text\">if condition then\n  setVariableValue(\"v_1\",\"yes\")\nelsif condition then\n  setVariableValue(\"v_1\",\"maybe\")\nelse\n  setVariableValue(\"v_1\",\"no\")\nend\n\n--[[\nWhere conditions can contain following operators:\n==, &lt;, &gt;, &lt;=, &gt;=, ~= (not equal, equal to !=)\n]] </code></pre>\n<h4 id=\"loops\" class=\"wysiwyg-text-align-justify\">Loops</h4>\n<pre><code class=\"language-text\">while condition do\n  -- something here\nend\n\nfor i = 1,5 do\n  -- something here\nend\n\nfor i = start,finish,delta do\n  -- something here\nend\n\nfor k,v in pairs(tab) do\n  -- something here\nend\n\nrepeat\n  -- something here\nuntil condition\n\n-- Breaking out:\nwhile x do\n  -- do something here before check\n  if condition then break end\n  -- or do something here after check\nend\n\n-- Loop on elements of table\narray = { [\"2\"] = \"a\", [\"11\"] = \"b\", [\"15\"] = \"c\", [\"30\"] = \"d\" }\nfor key, value in pairs (array) do\n  setVariableValue(\"v_\"..key, value)\nend\n\n-- You can also use this deprecated function:\narray = { [\"2\"] = \"a\", [\"11\"] = \"b\", [\"15\"] = \"c\", [\"30\"] = \"d\" }\ntable.foreach(array, function(key,value) setVariableValue (\"v_\"..key, value) end)</code></pre>\n<h4 id=\"functions\" class=\"wysiwyg-text-align-justify\">Functions</h4>\n<pre><code class=\"language-text\">function myFunction()\n  return 1\nend\n\nfunction myFunctionWithArgument(a, b)\n  -- ...\nend</code></pre>\n<h4 id=\"useful-global-functions\" class=\"wysiwyg-text-align-justify\">Useful global functions</h4>\n<pre><code class=\"language-text\">type(var) -- Returns type of variable: \"nil\" | \"number\" | \"string\" | \"boolean\" | \"table\" | \"function\" | \"thread\" | \"userdata\"\n\npairs(t) -- iterable list of {key, value}\nipairs(t) -- iterable list of {index, value}\n\n-- converting strings/unknown formats to numbers using tonumber(e [, base]):\nx = tonumber(\"34\")\nx = tonumber(\"8f\", 16)\n\n-- and to strings:\nx = tostring(101)</code></pre>\n<h4 id=\"string-api\" class=\"wysiwyg-text-align-justify\">String API</h4>\n<pre><code class=\"language-text\">-- Concat:\ny = \"world\"\ns = \"hello \"..y -- s == \"hello world\"\n\ns:upper()\ns:lower()\ns:len() -- Just like #s\n\ns:find()\ns:gfind()\n\ns:match()\ns:gmatch()\n\ns:sub()\ns:gsub()\n\ns:rep()\ns:char()\ns:dump()\ns:reverse()\ns:byte()\ns:format()</code></pre>\n<h4 id=\"math-api\" class=\"wysiwyg-text-align-justify\">Math API</h4>\n<pre><code class=\"language-text\">math.abs math.acos math.asin math.atan math.atan2\nmath.ceil math.cos math.cosh math.deg math.exp\nmath.floor math.fmod math.frexp math.ldexp math.log\nmath.log10 math.max math.min math.modf math.pow\nmath.rad math.random math.randomseed math.sin math.sinh\nmath.sqrt math.tan math.tanh\n\nmath.sqrt(144)\nmath</code></pre>\n<p class=\"wysiwyg-text-align-justify\"> </p>\n<h2 id=\"efs-specific-functions-in-lua-filters-and-lua-question-type\" class=\"wysiwyg-text-align-justify\"><strong>EFS-specific functions in LUA filters and LUA question type</strong></h2>\n<p class=\"wysiwyg-text-align-justify\">Please note: Loop variables are not supported within the LUA environment.</p>\n<h4 id=\"setvariablevalue-varname-varvalue\" class=\"wysiwyg-text-align-justify\"><em><strong>setVariableValue(varName, varValue)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Assigns the given value to the specified v_, c_ or p_ variable. The variable can be anywhere in the questionnaire, shown or hidden. The LUA question type itself provides variables, which can be used to store information.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>varName <em>string</em> - variable name</p>\n</li>\n<li>\n<p>varValue <em>string</em> - variable value</p>\n</li>\n</ul>\n<h4 id=\"setmasterdatavalue-varname-varvalue\" class=\"wysiwyg-text-align-justify\"><em><strong>setMasterDataValue(varName, varValue)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">This function only executes in panel surveys and master data surveys. It assigns or overwrites the given value to the specified master-data variable of the current participant and stores it in the database.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>varName <em>string</em> - variable name</p>\n</li>\n<li>\n<p>varValue <em>string</em> - variable value</p>\n</li>\n</ul>\n<h4 id=\"setquestionoutput-text\" class=\"wysiwyg-text-align-justify\"><em><strong>setQuestionOutput(text)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Sets the output of the LUA-question. This function should only be used once, as subsequent calls overwrite previous values, also this function only generates output as part of code executed during rendering of the question.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>text <em>string </em>- string to be shown in LUA-question</p>\n</li>\n</ul>\n<h4 id=\"remove_sys_miss-varvalue\" class=\"wysiwyg-text-align-justify\"><em><strong>remove_sys_miss(varValue) </strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Converts the system missing (code -77) to 0 in order to ease arithmetic operations. For example, when using the calculation-based LUA filter \"<em>return v_1+v_2+v_3&gt;10</em>\", System Missings (Code -77) will negatively affect the calculations, therefore \"<em>return remove_sys_miss(v_1)+remove_sys_miss(v_2)+remove_sys_miss(v_3)&gt;10</em>\" can be used to avoid this issue.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>varValue <em>mixed</em> - provided answer of a variable, e.g. <em>remove_sys_missing(_G[\"v_1\"])</em></p>\n</li>\n<li>\n<p>returns <em>int</em></p>\n</li>\n</ul>\n<h4 id=\"get_range_count-values-min_code-max_code\" class=\"wysiwyg-text-align-justify\"><em><strong>get_range_count(values, min_code, max_code)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns how many times the values specified are in the range provided by <em>min_code</em> and <em>max_code</em>. For example, the condition <em>return get_range_count({v_1,v_2,v_3,v_4,v_5},1,3)&gt;2</em> is true, if the participant answered more than 2 times in the first three categories of the matrix question represented by v_1-v_5.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>values <em>array</em> - List of values, e.g.<em> {v_1, v_2, v_3, v_4, v_5}</em></p>\n</li>\n<li>\n<p>min_code <em>mixed</em></p>\n</li>\n<li>\n<p>max_code <em>mixed</em></p>\n</li>\n<li>\n<p>returns <em>int</em></p>\n</li>\n</ul>\n<h4 id=\"getquotadebitvalue-id\" class=\"wysiwyg-text-align-justify\"><em><strong>getQuotaDebitValue(id)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns the quota's debit value.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>id <em>int</em> - quota ID</p>\n</li>\n<li>\n<p>returns <em>int</em></p>\n</li>\n</ul>\n<h4 id=\"getquotacurrentvalue-id\" class=\"wysiwyg-text-align-justify\"><em><strong>getQuotaCurrentValue(id)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns the quota's current value, e.g. <em>setVariableValue(\"v_1\", getQuotaCurrentValue(1))</em></p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>id <em>int</em> - quota ID</p>\n</li>\n<li>\n<p>returns <em>int</em></p>\n</li>\n</ul>\n<h4 id=\"getquotafillingdegree-id\" class=\"wysiwyg-text-align-justify\"><em><strong>getQuotaFillingDegree(id)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns the quota's filling degree. E.g. <em>setVariableValue(\"v_1\", </em>getQuotaFillingDegree(1)*100 .. \" %\")</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>id <em>int</em> - quota ID</p>\n</li>\n<li>\n<p>returns <em>double</em></p>\n</li>\n</ul>\n<h4 id=\"getquotaids\" class=\"wysiwyg-text-align-justify\"><em><strong>getQuotaIds()</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns an array of available quota IDs.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>returns <em>array</em></p>\n</li>\n</ul>\n<h4 id=\"count-condition\" class=\"wysiwyg-text-align-justify\"><em><strong>count(condition) </strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Returns the number of participants which match the specified condition and can be used to display statistics to participants or dynamically routing in filters depending on answers given by other participants. WARNING! This function has an impact on the performance of EFS and should only be used on surveys with low participation. For filing quotas, please use the built-in quota functionality in EFS as these are more efficient for this task.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>condition <em>string</em> - conditional expression e.g. <em>(v_1=1 AND v_2=2)</em></p>\n</li>\n<li>\n<p>returns <em>int</em> or <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"in_list-list_id\" class=\"wysiwyg-text-align-justify\"><em><strong>in_list(list_id)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Checks if the current list_element is also contained in the specified list.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>list_id <em>string</em> - Id of a list, e.g. <em>\"l_2\"</em></p>\n</li>\n<li>\n<p>returns <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"is_repeated_participation\" class=\"wysiwyg-text-align-justify\"><em><strong>is_repeated_participation()</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">This function checks whether the participant has already taken part in the survey and is only applicable in Panel surveys (PA and MD).</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>returns <em>int</em>, 0 if false or 1 if true</p>\n</li>\n</ul>\n<h4 id=\"is_assigned_in_or_below-check_metaname-metanames\" class=\"wysiwyg-text-align-justify\"><em><strong>is_assigned_in_or_below(check_metaname, metanames)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Checks whether the participant is part of the specified units or subunits in the org-structure of the ES project. Only applicable in Employee survey.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>check_metaname <em>string</em> - metaname</p>\n</li>\n<li>\n<p>metanames <em>array</em> - list of metanames the participant is assigned to</p>\n</li>\n<li>\n<p>returns <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"is_assigned_in-check_value-codes\" class=\"wysiwyg-text-align-justify\"><em><strong>is_assigned_in(check_value, codes)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Checks whether the participant's metaname code is assigned to the given unit metanames (array of codes). Only applicable in Employee survey.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>check_value <em>string</em> - metaname</p>\n</li>\n<li>\n<p>codes <em>array</em> - array of codes</p>\n</li>\n<li>\n<p>returns <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"is_assigned_in_branch-check_metaname-metanames\" class=\"wysiwyg-text-align-justify\"><em><strong>is_assigned_in_branch(check_metaname, metanames)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Checks whether the participant is assigned in part of specified units branch. Only applicable in Employee survey.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>check_metaname <em>string</em> - metaname</p>\n</li>\n<li>\n<p>metanames <em>array</em> - array of metanames the participant is assigned to</p>\n</li>\n<li>\n<p>returns <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"check_character_filter_any-needle-haystack\" class=\"wysiwyg-text-align-justify\"><em><strong>check_character_filter_any(needle, haystack)</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Checks whether the needle string is in the list provided in the haystack list of strings. Strings in haystack may be delimited by |, \",\", ; or -.</p>\n<p class=\"wysiwyg-text-align-justify\"><em>Data types</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>needle <em>string</em></p>\n</li>\n<li>\n<p>haystack <em>string</em></p>\n</li>\n<li>\n<p>returns <em>bool</em></p>\n</li>\n</ul>\n<h4 id=\"date-format-time\" class=\"wysiwyg-text-align-justify\"><em><strong>date([format [, time]])</strong></em></h4>\n<p class=\"wysiwyg-text-align-justify\">Replaces os.date() and returns a string or a table containing date and time, formatted according to the given string format. Please refer to <a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.date\">os.date documentation</a>.</p>\n<h4 id=\"time-table\" class=\"wysiwyg-text-align-justify\">time([table])</h4>\n<p class=\"wysiwyg-text-align-justify\">Replaces os.time() and returns the current time when called without arguments, or a time representing the date and time specified by the given table. Please refer to <a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.time\">os.time documentation</a>.</p>\n<h2 id=\"examples-for-lua-in-efs\" class=\"wysiwyg-text-align-justify\"><strong>Examples of LUA in EFS</strong></h2>\n<h3 id=\"block-specific-ips-from-accessing-a-survey-using-a-lua-filter\" class=\"wysiwyg-text-align-justify\">Block specific IPs from accessing a survey using an LUA filter</h3>\n<p class=\"wysiwyg-text-align-justify\">If you have a manageable list of IPs, that you want to block from accessing your survey, you can use a LUA filter to screen out these participants. This example code blocks the IPs 78.34.112.1, 78.34.112.2, and 78.34.112.3 and the list can be extended by providing additional comma-separated IPs. The last item should not have a comma after it.</p>\n<p class=\"wysiwyg-text-align-justify\"><img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21015359142546\" alt=\"Screenshot 2019-03-14 at 13.20.26.png\"><br><em>Example survey structure</em></p>\n<h5 id=\"example-code\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">function Set (list)\n  local set = {}\n  for _, l in ipairs(list) do set[l] = true end\n  return set\nend\n\nlocal blockedIps = Set {\n\n\"78.34.112.1\",\n\"78.34.112.2\",\n\"78.34.112.3\" \n \n}\n \nif blockedIps[remote_addr] then\n  return false\nelse\n  return true\nend</code></pre>\n<h3 id=\"show-a-item-of-the-day-to-all-participants\" class=\"wysiwyg-text-align-justify\"><strong>Show an item of the day to all participants</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">Select a random item from a list once per day, hour, or minute and store it in variable v_1 for all participants for the defined time. The function math.randomseed sets the randomizing integer for the random function, by providing the same integer for other participants, the same random value will be returned. To get the size of an array, put # in front of the name, e.g. #randomRestaurants.</p>\n<h5 id=\"example-code-1\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">local randomRestaurants = {\n  \"Indian Curry Basmati House\",\n  \"Calypso Grillbar\",\n  \"Rim Kong\",\n  \"Hayati\",\n  \"Metzgerei Kremer\",\n  \"Nakwon\",\n  \"KuroMaku Poke\",\n  \"Sushi Ninja\",\n  \"Vina Asia Express\",\n  \"485Grad\",\n  \"Osman Bey\"\n}\n \n-- Initialize the randomiser with the current day, use \"%y%m%d%H\" for hours or \"%y%m%d%H%M\" for minutes\nmath.randomseed( date(\"%y%m%d\") )\nsetVariableValue(\"v_1\", randomRestaurants[math.random( #randomRestaurants )])</code></pre>\n<h3 id=\"detect-first-name-last-name-and-company-name-from-email-address\" class=\"wysiwyg-text-align-justify\"><strong>Detect first name, last name, and company name from email address</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">This example takes the email address stored in v_1 and assigns the company, first and last name to variables v_10, v_11 and v_12. This works on email aliases using firstname.lastname@company.tld or <a href=\"mailto:firstname_lastname@company.tld\">firstname_lastname@company.tld</a> as their format. If the first or last name are not detected, then the variables will not be assigned a value.  </p>\n<h5 id=\"example-code-2\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">-- pattern for company name\nsetVariableValue(\"v_10\",_G[\"v_1\"]:match(\"@([%w+%-_]*)%.?\"):gsub(\"^%l\", string.upper))\n-- pattern for first name\nsetVariableValue(\"v_11\",_G[\"v_1\"]:match(\"^([%w%-]+)[%._]\"):gsub(\"^%l\", string.upper))\n-- pattern for last name\nsetVariableValue(\"v_12\",_G[\"v_1\"]:match(\"[%._]([%w%-]+)@\"):gsub(\"^%l\", string.upper))</code></pre>\n<h3 id=\"look-up-participant_country-code-in-a-list-of-countries\" class=\"wysiwyg-text-align-justify\"><strong>Look up participant_country code in a list of countries</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">If you have enabled the setting \"Detect participants' location using the IP address\" in the survey's project properties, then EFS will store the code of the participants country in the variable participant_country. Currently, there is no possibility to recode this variable to another variable with the country's label. With the example code, the code will be looked up in an array and the country's label is stored in v_1. This can be used to pre-populate a text field when asking for a user's location and the example code can be adapted to match participant_country codes to codes in a select box for pre-selection.</p>\n<h5 id=\"example-code-long\" class=\"wysiwyg-text-align-justify\"><strong>Example code (long)</strong></h5>\n<pre><code class=\"language-delphi\">countries = {\n            [-99]=\"Unknown\",\n            [1]=\"Satellite Provider\",\n            [2]=\"Other Country\",\n            [3]=\"Andorra\",\n            [4]=\"United Arab Emirates\",\n            [5]=\"Afghanistan\",\n            [6]=\"Antigua and Barbuda\",\n            [7]=\"Anguilla\",\n            [8]=\"Albania\",\n            [9]=\"Armenia\",\n            [10]=\"Angola\",\n            [11]=\"Asia/Pacific Region\",\n            [12]=\"Antarctica\",\n            [13]=\"Argentina\",\n            [14]=\"American Samoa\",\n            [15]=\"Austria\",\n            [16]=\"Australia\",\n            [17]=\"Aruba\",\n            [18]=\"Aland Islands\",\n            [19]=\"Azerbaijan\",\n            [20]=\"Bosnia and Herzegovina\",\n            [21]=\"Barbados\",\n            [22]=\"Bangladesh\",\n            [23]=\"Belgium\",\n            [24]=\"Burkina Faso\",\n            [25]=\"Bulgaria\",\n            [26]=\"Bahrain\",\n            [27]=\"Burundi\",\n            [28]=\"Benin\",\n            [29]=\"Saint Barthelemy\",\n            [30]=\"Bermuda\",\n            [31]=\"Brunei\",\n            [32]=\"Bolivia\",\n            [33]=\"Bonaire, Saint Eustatius and Saba\",\n            [34]=\"Brazil\",\n            [35]=\"Bahamas\",\n            [36]=\"Bhutan\",\n            [37]=\"Bouvet Island\",\n            [38]=\"Botswana\",\n            [39]=\"Belarus\",\n            [40]=\"Belize\",\n            [41]=\"Canada\",\n            [42]=\"Cocos Islands\",\n            [43]=\"Democratic Republic of the Congo\",\n            [44]=\"Central African Republic\",\n            [45]=\"Republic of the Congo\",\n            [46]=\"Switzerland\",\n            [47]=\"Ivory Coast\",\n            [48]=\"Cook Islands\",\n            [49]=\"Chile\",\n            [50]=\"Cameroon\",\n            [51]=\"China\",\n            [52]=\"Colombia\",\n            [53]=\"Costa Rica\",\n            [54]=\"Cuba\",\n            [55]=\"Cape Verde\",\n            [56]=\"Curacao\",\n            [57]=\"Christmas Island\",\n            [58]=\"Cyprus\",\n            [59]=\"Czechia\",\n            [60]=\"Germany\",\n            [61]=\"Djibouti\",\n            [62]=\"Denmark\",\n            [63]=\"Dominica\",\n            [64]=\"Dominican Republic\",\n            [65]=\"Algeria\",\n            [66]=\"Ecuador\",\n            [67]=\"Estonia\",\n            [68]=\"Egypt\",\n            [69]=\"Western Sahara\",\n            [70]=\"Eritrea\",\n            [71]=\"Spain\",\n            [72]=\"Ethiopia\",\n            [73]=\"Europe\",\n            [74]=\"Finland\",\n            [75]=\"Fiji\",\n            [76]=\"Falkland Islands\",\n            [77]=\"Micronesia\",\n            [78]=\"Faroe Islands\",\n            [79]=\"France\",\n            [80]=\"Gabon\",\n            [81]=\"United Kingdom\",\n            [82]=\"Grenada\",\n            [83]=\"Georgia\",\n            [84]=\"French Guiana\",\n            [85]=\"Guernsey\",\n            [86]=\"Ghana\",\n            [87]=\"Gibraltar\",\n            [88]=\"Greenland\",\n            [89]=\"Gambia\",\n            [90]=\"Guinea\",\n            [91]=\"Guadeloupe\",\n            [92]=\"Equatorial Guinea\",\n            [93]=\"Greece\",\n            [94]=\"South Georgia and the South Sandwich Islands\",\n            [95]=\"Guatemala\",\n            [96]=\"Guam\",\n            [97]=\"Guinea-Bissau\",\n            [98]=\"Guyana\",\n            [99]=\"Hong Kong\",\n            [100]=\"Heard Island and McDonald Islands\",\n            [101]=\"Honduras\",\n            [102]=\"Croatia\",\n            [103]=\"Haiti\",\n            [104]=\"Hungary\",\n            [105]=\"Indonesia\",\n            [106]=\"Ireland\",\n            [107]=\"Israel\",\n            [108]=\"Isle of Man\",\n            [109]=\"India\",\n            [110]=\"British Indian Ocean Territory\",\n            [111]=\"Iraq\",\n            [112]=\"Iran\",\n            [113]=\"Iceland\",\n            [114]=\"Italy\",\n            [115]=\"Jersey\",\n            [116]=\"Jamaica\",\n            [117]=\"Jordan\",\n            [118]=\"Japan\",\n            [119]=\"Kenya\",\n            [120]=\"Kyrgyzstan\",\n            [121]=\"Cambodia\",\n            [122]=\"Kiribati\",\n            [123]=\"Comoros\",\n            [124]=\"Saint Kitts and Nevis\",\n            [125]=\"North Korea\",\n            [126]=\"South Korea\",\n            [127]=\"Kuwait\",\n            [128]=\"Cayman Islands\",\n            [129]=\"Kazakhstan\",\n            [130]=\"Laos\",\n            [131]=\"Lebanon\",\n            [132]=\"Saint Lucia\",\n            [133]=\"Liechtenstein\",\n            [134]=\"Sri Lanka\",\n            [135]=\"Liberia\",\n            [136]=\"Lesotho\",\n            [137]=\"Lithuania\",\n            [138]=\"Luxembourg\",\n            [139]=\"Latvia\",\n            [140]=\"Libya\",\n            [141]=\"Morocco\",\n            [142]=\"Monaco\",\n            [143]=\"Moldova\",\n            [144]=\"Montenegro\",\n            [145]=\"Saint Martin\",\n            [146]=\"Madagascar\",\n            [147]=\"Marshall Islands\",\n            [148]=\"Macedonia\",\n            [149]=\"Mali\",\n            [150]=\"Myanmar\",\n            [151]=\"Mongolia\",\n            [152]=\"Macao\",\n            [153]=\"Northern Mariana Islands\",\n            [154]=\"Martinique\",\n            [155]=\"Mauritania\",\n            [156]=\"Montserrat\",\n            [157]=\"Malta\",\n            [158]=\"Mauritius\",\n            [159]=\"Maldives\",\n            [160]=\"Malawi\",\n            [161]=\"Mexico\",\n            [162]=\"Malaysia\",\n            [163]=\"Mozambique\",\n            [164]=\"Namibia\",\n            [165]=\"New Caledonia\",\n            [166]=\"Niger\",\n            [167]=\"Norfolk Island\",\n            [168]=\"Nigeria\",\n            [169]=\"Nicaragua\",\n            [170]=\"Netherlands\",\n            [171]=\"Norway\",\n            [172]=\"Nepal\",\n            [173]=\"Nauru\",\n            [174]=\"Niue\",\n            [175]=\"New Zealand\",\n            [176]=\"Oman\",\n            [177]=\"Panama\",\n            [178]=\"Peru\",\n            [179]=\"French Polynesia\",\n            [180]=\"Papua New Guinea\",\n            [181]=\"Philippines\",\n            [182]=\"Pakistan\",\n            [183]=\"Poland\",\n            [184]=\"Saint Pierre and Miquelon\",\n            [185]=\"Pitcairn\",\n            [186]=\"Puerto Rico\",\n            [187]=\"Palestinian Territory\",\n            [188]=\"Portugal\",\n            [189]=\"Palau\",\n            [190]=\"Paraguay\",\n            [191]=\"Qatar\",\n            [192]=\"Reunion\",\n            [193]=\"Romania\",\n            [194]=\"Serbia\",\n            [195]=\"Russia\",\n            [196]=\"Rwanda\",\n            [197]=\"Saudi Arabia\",\n            [198]=\"Solomon Islands\",\n            [199]=\"Seychelles\",\n            [200]=\"Sudan\",\n            [201]=\"Sweden\",\n            [202]=\"Singapore\",\n            [203]=\"Saint Helena\",\n            [204]=\"Slovenia\",\n            [205]=\"Svalbard and Jan Mayen\",\n            [206]=\"Slovakia\",\n            [207]=\"Sierra Leone\",\n            [208]=\"San Marino\",\n            [209]=\"Senegal\",\n            [210]=\"Somalia\",\n            [211]=\"Suriname\",\n            [212]=\"South Sudan\",\n            [213]=\"Sao Tome and Principe\",\n            [214]=\"El Salvador\",\n            [215]=\"Sint Maarten\",\n            [216]=\"Syria\",\n            [217]=\"Swaziland\",\n            [218]=\"Turks and Caicos Islands\",\n            [219]=\"Chad\",\n            [220]=\"French Southern Territories\",\n            [221]=\"Togo\",\n            [222]=\"Thailand\",\n            [223]=\"Tajikistan\",\n            [224]=\"Tokelau\",\n            [225]=\"East Timor\",\n            [226]=\"Turkmenistan\",\n            [227]=\"Tunisia\",\n            [228]=\"Tonga\",\n            [229]=\"Turkey\",\n            [230]=\"Trinidad and Tobago\",\n            [231]=\"Tuvalu\",\n            [232]=\"Taiwan\",\n            [233]=\"Tanzania\",\n            [234]=\"Ukraine\",\n            [235]=\"Uganda\",\n            [236]=\"United States Minor Outlying Islands\",\n            [237]=\"United States\",\n            [238]=\"Uruguay\",\n            [239]=\"Uzbekistan\",\n            [240]=\"Vatican\",\n            [241]=\"Saint Vincent and the Grenadines\",\n            [242]=\"Venezuela\",\n            [243]=\"British Virgin Islands\",\n            [244]=\"U.S. Virgin Islands\",\n            [245]=\"Vietnam\",\n            [246]=\"Vanuatu\",\n            [247]=\"Wallis and Futuna\",\n            [248]=\"Samoa\",\n            [249]=\"Yemen\",\n            [250]=\"Mayotte\",\n            [251]=\"South Africa\",\n            [252]=\"Zambia\",\n            [253]=\"Zimbabwe\",\n            [254]=\"Kosovo\",\n            [255]=\"Serbia and Montenegro\",\n            [256]=\"Netherlands Antilles\"\n}\nsetVariableValue(\"v_1\",countries[_G[\"participant_country\"]])</code></pre>\n<h3 id=\"get-current-gmt-time\" class=\"wysiwyg-text-align-justify\"><strong>Get current GMT time</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">This code will return the time on server side in GMT and can be used for date related calculations.</p>\n<h5 id=\"example-code-3\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">setVariableValue(\"v_1\", date(\"!%H %M\"))</code></pre>\n<h3 id=\"comparing-the-frequency-of-completed-interviews\" class=\"wysiwyg-text-align-justify\"><strong>Comparing the Frequency of completed Interviews</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">The following <em>alternative</em> filter condition checks which of several possibilities the participants preferred so far:</p>\n<p class=\"wysiwyg-text-align-justify\"><em>(count['v_1 = 1'] &gt; count['v_2 = 1'] ) AND (count['v_1 = 1'] &gt; count['v_3 = 1'] ) OR (count['v_2 = 1'] &gt; count['v_1 = 1'] ) AND (count['v_2 = 1'] &gt; count['v_3 = 1'] )</em></p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>If at the point in time when a participant passes the filter, v_1 or v_2 were selected more frequently, the filter condition is fulfilled.</p>\n</li>\n<li>\n<p>If v_3 has been selected more frequently, the condition does not apply for the current participant. </p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\">Using LUA instead of the alternative filter function has several advantages:</p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>Speed: Each count strains the server. In the alternative filter condition above, count requests are executed repeatedly for the same variable. In the LUA condition above, only one count request is necessary for each variable.</p>\n</li>\n<li>\n<p>Shortness and overview: The more variables are to be checked, the longer and more confusing the alternative filter condition will become. In the LUA filter below, additional variables are simply added to the “configuration” section.</p>\n</li>\n<li>\n<p>Easier to maintain and configure:<br>– When making changes, all you need to do is modify the two arrays in the “configuration” section.<br>– Non-programmers can re-use the condition, by doing simple copy&amp;paste and a few minor modifications.</p>\n</li>\n</ul>\n<h5 id=\"example-code-4\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">-- configuration\nvars={\"v_1\",\"v_2\",\"v_3\"}\nrelevant_filter_vars={\"v_1\",\"v_2\"}\n\n-- no need to change anything below\ncounts={}\nmax=nil\nmax_var=nil\nfor k,v in ipairs(vars) do\n  local count=count(v)\n  if max==nil or max&lt;count then\n    max_var=v\n    max=count\n  end\nend\n\nfor k,v in pairs(relevant_filter_vars) do\n  if v==max_var then\n    return true\n  end\nend\nreturn false</code></pre>\n<h3 id=\"comparing-answer-patterns\" class=\"wysiwyg-text-align-justify\"><strong>Comparing Answer Patterns</strong></h3>\n<p class=\"wysiwyg-text-align-justify\">The filter checks if the sum of answers in a 1st branch equals the sum of answers in a second branch. In the following example, for the sake of briefness, only one of these sums is created. The survey contains variables in the range v_135 to v_173.</p>\n<p class=\"wysiwyg-text-align-justify\">The syntax ( v_x &gt; 0 ? 1 :0) used in the alternative filter condition ensures that hiding conditions and unanswered items are considered appropriately:</p>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p>If the participant has answered v_x &gt; 0. With v_x &gt; 0 ? 1 the value is uniformly set to = 1.</p>\n</li>\n<li>\n<p>If the participant has not seen or not answered an item, i.e. v_x smaller or equal 0, the corresponding factor will be set = 0. This is necessary because missing values, as e.g. -77, prevent a proper calculation of the sum.</p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\"><em>(( v_135 &gt; 0 ? 1 :0) + ( v_136&gt; 0 ? 1 :0) + ( v_137 &gt; 0 ? 1 :0) + ( v_138 &gt; 0 ? 1 :0) +( v_139 &gt; 0 ? 1 :0) +( v_140 &gt; 0 ? 1 :0) + ( v_141 &gt; 0 ? 1 :0) + ( v_142 &gt; 0 ? 1 :0) + ( v_143&gt; 0 ? 1 :0) + ( v_144 &gt; 0 ? 1 :0) + ( v_145 &gt; 0 ? 1 :0) + ( v_146 &gt; 0 ? 1 :0) + ( v_147 &gt; 0 ? 1 :0) + ( v_148 &gt; 0 ? 1 :0) + ( v_149 &gt; 0 ? 1 :0) + ( v_150 &gt; 0 ? 1 :0) + ( v_151 &gt; 0 ? 1 :0) +( v_152 &gt; 0 ? 1 :0) +( v_153 &gt; 0 ? 1 :0) +( v_154 &gt; 0 ? 1 :0) +( v_155 &gt; 0 ? 1 :0) +( v_156 &gt; 0 ? 1 :0) +( v_157 &gt; 0 ? 1 :0) +( v_158 &gt; 0 ? 1 :0) +( v_159 &gt; 0 ? 1 :0) + ( v_160 &gt; 0 ? 1 :0) + ( v_161 &gt; 0 ? 1 :0) + ( v_162 &gt; 0 ? 1 :0) + ( v_163 &gt; 0 ? 1 :0) + ( v_164 &gt; 0 ? 1 :0) +( v_165 &gt; 0 ? 1 :0) +( v_166 &gt; 0 ? 1 :0) +( v_167&gt; 0 ? 1 :0) +( v_168 &gt; 0 ? 1 :0) +( v_169&gt; 0 ? 1 :0) + ( v_170 &gt; 0 ? 1 :0) +( v_171 &gt; 0 ? 1 :0) +( v_172 &gt; 0 ? 1 :0) +( v_173 &gt; 0 ? 1 :0)) </em>[...etc]</p>\n<p class=\"wysiwyg-text-align-justify\">With LUA, this can be achieved much easier, by creating a for loop and passing a counter ranged from 135 to 173, alternatively an array of specific variable ids could be supplied to the for loop.</p>\n<h5 id=\"example-code-5\" class=\"wysiwyg-text-align-justify\"><strong>Example code</strong></h5>\n<pre><code class=\"language-delphi\">sum=0\nfor i=135,173 do\n  if _G[\"v_\"..i]&gt;0 then\n    sum=sum+1\n  end \nend</code></pre>\n<h2 id=\"my-code-is-not-working-what-should-i-do\" class=\"wysiwyg-text-align-justify\"><strong>My code is not working, what should I do?</strong></h2>\n<p class=\"wysiwyg-text-align-justify\">First of all, check if there are any trigger errors reported on the survey menu, EFS does not display LUA errors to survey participants. You can also go to Test and validation -&gt; Project check, click on errors in \"Errors while processing the survey\" to get a list of all trigger errors in your survey. Also check the execution time of the LUA code, whether it is processed when the page is loaded or only when the page is submitted, and whether all required variables have already been filled in by the participant when the LUA code is executed.</p>\n<p class=\"wysiwyg-text-align-justify\">If this does not help use external LUA sandboxes where debugging is easier, for example online at <a href=\"http://repl.it\">repl.it</a> or in a local LUA 5.1 sandbox on your computer. You will have to create any EFS variables or EFS-specific functions in the external LUA sandbox, see the end of this page for an example.</p>\n<p class=\"wysiwyg-text-align-justify\">Please note, that Questback's EFS support team is unable to assist you in bug fixing your LUA code.</p>\n<h2 id=\"useful-lua-resources\" class=\"wysiwyg-text-align-justify\"><strong>Useful LUA resources</strong></h2>\n<ul class=\"wysiwyg-text-align-justify\">\n<li>\n<p><a href=\"https://www.lua.org/manual/5.1/\">LUA 5.1 Reference Manual</a></p>\n</li>\n<li>\n<p><a href=\"https://www.lua.org/pil/contents.html\">Programming in LUA 5.0</a>, free for personal use</p>\n</li>\n<li>\n<p><a href=\"https://www.lua.org/manual/5.1/manual.html#5.6\">Description of mathematical functions in the math library</a></p>\n</li>\n<li>\n<p><a href=\"https://rrthomas.github.io/lrexlib/manual.html\">Lrexlib reference manual</a> (Regular Expressions)</p>\n</li>\n<li>\n<p><a href=\"https://repl.it/\">Repl.it</a> provides a convenient LUA 5.1 online environment for writing and debugging LUA code in a controlled environment. Some EFS functions can be emulated by rewriting them, see example below.</p>\n<img src=\"https://discoverxi-supportdesk.zendesk.com/hc/article_attachments/21015359144082\" alt=\"Screenshot 2019-03-14 at 15.02.50.png\">\n<p><strong>Example functions for use in </strong><a href=\"http://repl.it\"><strong>repl.it</strong></a></p>\n<pre><code class=\"language-delphi\">-- EFS function getQuotaCurrentValue with array of example quota-values\nfunction getQuotaCurrentValue(a)\n  b = {8, 4, 2, 3, 3, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 5, 3, 1, 5, 4}\n  return b[a]\nend\n\n-- EFS function setVariableValue function, outputs value to console as v_1=1\nfunction setVariableValue(a,b)\n\tprint(a ..\"=\"..b)\nend</code></pre>\n<h1 id=\"h_01HGKSMPRSER9ENY5QWWRZZ863\"> </h1>\n</li>\n</ul>\n<h1 id=\"h_01HGKSMPRSER9ENY5QWWRZZ863\" class=\"wysiwyg-text-align-justify\">FAQ</h1>\n<h3 id=\"h_01HGKSMPRTX5YJXQX3QBXQZ8ZQZ\" class=\"wysiwyg-text-align-justify\">What version of LUA does EFS use?</h3>\n<p class=\"wysiwyg-text-align-justify\">EFS Survey uses LUA Version 5.1 in its LUA filters and LUA question types.</p>\n<h3 id=\"h_01HGKSMPRTX5YJXQX3QBXQZ8ZR0\" class=\"wysiwyg-text-align-justify\">Are all LUA functions available in EFS?</h3>\n<p class=\"wysiwyg-text-align-justify\">EFS provides access to almost all default LUA libraries. However, for security reasons, some functions (e.g., dofile, load, loadfile, print, require) and the os library are not available.</p>\n<h3 id=\"h_01HGKSMPRTX5YJXQX3QBXQZ8ZR1\" class=\"wysiwyg-text-align-justify\">Can I use regular expressions in EFS LUA scripts?</h3>\n<p class=\"wysiwyg-text-align-justify\">Yes, access to the Lrexlib is possible, allowing advanced Regular Expressions within the LUA environment.</p>",
    "user_segment_ids": []
}