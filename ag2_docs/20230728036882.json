{
    "id": 20230728036882,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20230728036882.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20230728036882-What-types-of-plausibility-checks-are-available-by-default",
    "author_id": 369584192734,
    "comments_disabled": true,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20271541513746,
    "created_at": "2024-07-18T12:35:07Z",
    "updated_at": "2024-08-19T19:32:21Z",
    "name": "What types of plausibility checks are available by default?",
    "title": "What types of plausibility checks are available by default?",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-07-20T16:36:19Z",
    "user_segment_id": null,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<p><span style=\"font-size: 2.1em;\">Overview</span></p>\n<article>\n<p>This article provides information about the various types of plausibility checks available by default in the system. It covers different check types, their parameters, and properties, as well as detailed explanations for each check type.</p>\n<p> </p>\n<h1 id=\"h_01HGKSMPRSYYE7GMM7DZ0VCKXK\">Information</h1>\n<h3 id=\"Predefined-Plausibility-Checks-(Plausibility-Check-Types)\" data-renderer-start-pos=\"29\">Predefined Plausibility Checks (Plausibility Check Types)</h3>\n<div class=\"pm-table-container with-shadow-observer\" data-layout=\"default\">\n<div class=\"cc-12efcmn\"> </div>\n<div class=\"pm-table-wrapper\">\n<table class=\"\" style=\"border-collapse: collapse; border-top-style: ; border-top-width: ; border-right-style: ; border-right-width: ; border-bottom-style: ; border-bottom-width: ; border-left-style: ; border-left-width: ; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; height: 1px; width: 760px;\" border=\"1\" data-testid=\"renderer-table\" data-number-column=\"false\" data-table-width=\"760\" data-layout=\"default\">\n<colgroup> <col style=\"width: 225.67px;\"> <col style=\"width: 225.67px;\"> <col style=\"width: 225.67px;\"> </colgroup>\n<tbody>\n<tr style=\"height: 47.1289px;\">\n<th class=\"ak-renderer-tableHeader-sortable-column__wrapper wysiwyg-text-align-center\" style=\"padding: 0px; vertical-align: top; background-color: #dfd8fd;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\" data-cell-background=\"#c0b6f2\" aria-sort=\"none\">\n<div class=\"ak-renderer-tableHeader-sortable-column\">\n<p data-renderer-start-pos=\"91\">Type</p>\n</div>\n</th>\n<th class=\"ak-renderer-tableHeader-sortable-column__wrapper wysiwyg-text-align-center\" style=\"padding: 0px; vertical-align: top; background-color: #dfd8fd;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\" data-cell-background=\"#c0b6f2\" aria-sort=\"none\">\n<div class=\"ak-renderer-tableHeader-sortable-column\">\n<p data-renderer-start-pos=\"99\">Parameter</p>\n</div>\n</th>\n<th class=\"ak-renderer-tableHeader-sortable-column__wrapper wysiwyg-text-align-center\" style=\"padding: 0px; vertical-align: top; background-color: #dfd8fd;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\" data-cell-background=\"#c0b6f2\" aria-sort=\"none\">\n<div class=\"ak-renderer-tableHeader-sortable-column\">\n<p data-renderer-start-pos=\"112\">Properties</p>\n</div>\n</th>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"128\">Range check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"143\">Variable, “int” from,<br>“int” to</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"177\">Checks whether the value of the variable is a number<br>between two values.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"255\">E-mail address<br>check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"279\">Variable</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"291\">Check whether the value of the variable is a valid email address. It will be checked for characters used,<br>for the “@” character and for the period before the domain address.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"471\">Standard check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"489\">Freely definable</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"509\">Checks one or more variables using an operator.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"562\">Format check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"578\">Variable, format</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"598\">Checks a variable using predefined regular expressions (numbers only, letters only, etc.).</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"694\">RegEx check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"709\">Variable, regular<br>expression</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"741\">Checks a variable using a freely definable RegEx.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"796\">NoRegEx check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"813\">Variable, regular<br>expression</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"845\">Checks a variable using a freely definable RegEx.<br>Returns “true” if the expression was not successful.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"953\">OnlyNumbers check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"974\">Variable</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"986\">Checks whether a variable contains only numbers,<br>comma and period.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1058\">Range check old</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1077\">Variable, “int” from,<br>“int” to</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1111\">Checks whether the value of the variable is a number<br>outside the range between two values.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1207\">Combination check</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1228\">Variable, “int”</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1247\">For questions with multiple response lists, checks<br>whether the required number of checkboxes has been<br>ticked.</p>\n</td>\n</tr>\n<tr>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1362\">Combination check<br>(range)</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1391\">Variable, “int” from,<br>“int” to</p>\n</td>\n<td style=\"padding: var(--ds-space-100,8px); text-align: left; vertical-align: top;\" colspan=\"1\" rowspan=\"1\" data-colwidth=\"226.67\">\n<p data-renderer-start-pos=\"1425\">For questions with multiple response lists, checks<br>whether the number of checkboxes ticked is within a<br>preset range.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"sentinel-right\"> </div>\n</div>\n</div>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"1546\"><br><strong data-renderer-mark=\"true\">Range check</strong><br>The range check checks whether the number entered by the survey participant is within the number range you set. Otherwise, the plausibility check will be triggered and report an error. For this, the preset limits are included in the permissible range of values. The check also works with negative numbers.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"1866\">If you set up a range check to do a JavaScript plausibility check or a combined PHP plausibility check, please note: JavaScript gives a value of “0” to an empty string (nothing entered). That is, if a respondent enters nothing, it will not be seen as an incorrect entry, rather it will be given a value of “0”, which is either permitted or prohibited depending on how each area is defined. In order to prevent this kind of misevaluation, please run a separate OnlyNumbers check (do not use AND conjunctions with the Range check) on the input field.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"2416\"><strong data-renderer-mark=\"true\">E-Mail address check</strong><br>The e-mail address check checks the variable to be set for a correctly entered e-mail address. A correct e-mail address consists of four parts.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"2582\">Example: <a class=\"cc-1rn59kg\" title=\"mailto:tester@email.de\" href=\"mailto:tester@email.de\" data-testid=\"link-with-safety\" data-renderer-mark=\"true\">tester@email.de</a></p>\n<ol class=\"ak-ol wysiwyg-text-align-justify\" start=\"1\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"2610\">An individual user name (tester in the example).</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"2662\">The @ character.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"2682\">A domain name (email in the example).</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"2723\">A country ID, separated from the domain name by a period (.de in the example). The e-mail address check checks the four parts for the following form:</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"2876\">The individual user name: The individual user name may contain letters and numbers as well as the characters “.”, “_” and “–”. Umlauts are not allowed.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3031\">The domain name: The domain name may contain letters, numbers and periods. Umlauts are not allowed. The domain name can be subdivided by any number of periods.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3194\">The country ID: The domain name may only contain letters, with a minimum of 2 and a maximum of 6 letters allowed. Umlauts are not allowed.</p>\n</li>\n</ol>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"3336\"><br><strong data-renderer-mark=\"true\">Standard check</strong><br>The standard check checks the variable to be set to see whether it meets a condition set through the mathematical operators (= , &lt; , &gt; , &lt;= , &gt;= , !=).</p>\n<ol class=\"ak-ol wysiwyg-text-align-justify\" start=\"1\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"3507\">Select the variable you want to check.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3549\">Select the mathematical operator you want to use to check the variable.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3624\">Enter the value of the variable for which the check is to be performed.</p>\n</li>\n</ol>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"3699\"><br><strong data-renderer-mark=\"true\">Format check </strong><br>The format check checks the variable to be set to see whether it complies with a format, also set by you.<br>You have the choice of the following formats:</p>\n<ul class=\"ak-ul wysiwyg-text-align-justify\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"3869\">Checking to see whether the field contains no numbers.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3927\">Checking to see whether the field contains only uppercase letters.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"3997\">Checking to see whether the field contains only lowercase letters.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"4067\">Checking to see whether the field contains only numbers with periods or commas.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"4150\">Checking to see whether the field contains only numbers with or without periods.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"4234\">Checking to see whether the field contains only numbers with or without commas.</p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"4317\">If you set up a range check to do a JavaScript plausibility check or a combined PHP plausibility check, please note: JavaScript gives a value of “0” to an empty string (nothing entered). That is, if a respondent enters nothing, it will not be seen as an incorrect entry, rather it will be given a value of “0”, which is either permitted or prohibited depending on how each area is defined. In order to prevent this kind of misevaluation, please run a separate OnlyNumbers check (do not use AND conjunctions with the Range check) on the input field.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"4867\">To create the format check, please proceed as follows:</p>\n<ol class=\"ak-ol wysiwyg-text-align-justify\" start=\"1\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"4925\">Select the variable you want to check.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"4967\">Select the format for which you want to check the variable you previously set.</p>\n</li>\n</ol>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"5049\"><br><strong data-renderer-mark=\"true\">RegEx check and NoRegEx check</strong><br>The RegEx and NoRegEx checks check the variable to be set to see whether it complies with a regular expression, also set by you.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"5210\">Regular expressions are defined as follows:</p>\n<ul class=\"ak-ul wysiwyg-text-align-justify\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"5257\">Regular expressions, or RegEx for short, are used to check strings. They are used very frequently, especially in the UNIX environment, and make it easier to check strings containing many conditions.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"5459\">There are to possible types of RegEx:</p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"5500\">– RegEx check</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"5515\">– NoRegEx check</p>\n<ul class=\"ak-ul wysiwyg-text-align-justify\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"5534\">If a RegEx check returns “true”, an error message is output. The logic of the NoRegEx check is exactly the other way around.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"5662\">RegEx checks are enclosed in “/”. Optionally, a so-called pattern modifier can be placed at the end. Please note that RegEx checks in PHP and JS may show a differing behavior. For JS checks, the results might even differ among various browsers. Because of the complexity of regular expressions, we recommend testing the check in the system first.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"6012\">Examples: </p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"6026\">– Zip code check =&gt; /^[0-9]{5}$/ (exactly 5 digits)</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"6079\">– Money field =&gt; /^[0-9]+ (EUR|USD)$/ (as many numbers as required + currency, either EUR or USD)</p>\n<ul class=\"ak-ul wysiwyg-text-align-justify\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"6180\">References: <span data-inline-card=\"true\" data-card-url=\"http://www.php.net/manual/en/ref.pcre.php\"><span class=\"loader-wrapper\"><span aria-expanded=\"false\" aria-haspopup=\"true\" data-testid=\"hover-card-trigger-wrapper\"><a class=\"css-118vsk3 e26bri0\" tabindex=\"0\" role=\"button\" href=\"http://www.php.net/manual/en/ref.pcre.php\" data-testid=\"inline-card-resolved-view\"><span class=\"css-1cwva94 e1a3lu072\" data-testid=\"inline-card-icon-and-title\"><span class=\"css-1lcr4h8 e1a3lu075\"><img class=\"smart-link-icon css-ijlt3r e1yrcv6a0\" style=\"height: 14px; width: 14px;\" src=\"https://www.php.net/favicon-16x16.png?v=2\" data-testid=\"inline-card-icon-and-title-image\"></span><span class=\"smart-link-title-wrapper css-0 e1a3lu077\">PHP: Hypertext Preprocessor</span></span></a></span></span></span></p>\n</li>\n</ul>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"6198\">Complications can arise when, in a survey that is encoded in UTF-8 RegEx checks with JavaScript or JavaScript and PHP are carried out in order to compare strings containing more than just numbers: JavaScript is unable to recognize umlauts or other special characters that are reproduced in UTF-8 as doublebyte character (thus takes up two characters).</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"6551\">To create a RegEx check, please proceed as follows:</p>\n<ol class=\"ak-ol wysiwyg-text-align-justify\" start=\"1\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"6606\">Select the variable you want to check.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"6648\">In the text field, specify the regular expression whose entry is to trigger the RegEx check.</p>\n</li>\n</ol>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"6744\"><br>To create a NoRegEx check, please proceed as follows:</p>\n<ol class=\"ak-ol wysiwyg-text-align-justify\" start=\"1\" data-indent-level=\"1\">\n<li>\n<p data-renderer-start-pos=\"6802\">Select the variable you want to check.</p>\n</li>\n<li>\n<p data-renderer-start-pos=\"6844\">In the text field, specify the regular expression whose entry is not supposed to trigger the NoRegEx check. For all entries of other types in the field to be checked, the check will be triggered.</p>\n</li>\n</ol>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"7043\"><br><strong data-renderer-mark=\"true\">Range check old</strong><br>In contrast to the range check explained above, the range check old checks the invalid range of the variable to be set. This means that the value entered by the participant must be outside the number range you set. Otherwise, the plausibility check will be triggered.</p>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"7329\"><strong data-renderer-mark=\"true\">Combination check and combination check (range)</strong><br>Two other plausibility checks are available for questions with multiple response lists (question types 121, 122, 362, 521, 522, 621):</p>\n<ul class=\"ak-ul\" data-indent-level=\"1\">\n<li class=\"wysiwyg-text-align-justify\">\n<p data-renderer-start-pos=\"7514\">The combination check allows you to check whether a respondent has ticked a required number of checkboxes.</p>\n</li>\n<li>\n<p class=\"wysiwyg-text-align-justify\" data-renderer-start-pos=\"7624\">The combination check (range) checks whether the number of checkboxes ticked is within a preset range.</p>\n</li>\n</ul>\n<p> </p>\n<h1 id=\"h_01HGKSMPRSER9ENY5QWWRZZ863\">FAQ</h1>\n<h3 id=\"faq-1\">What is the difference between RegEx and NoRegEx checks?</h3>\n<p>RegEx checks return \"true\" and trigger an error message when the input matches the specified regular expression. NoRegEx checks do the opposite, returning \"true\" when the input does not match the specified regular expression.</p>\n<h3 id=\"faq-2\">How do I handle empty input fields in JavaScript plausibility checks?</h3>\n<p>To prevent misevaluation of empty input fields in JavaScript plausibility checks, use a separate OnlyNumbers check instead of combining it with a Range check using AND conjunctions.</p>\n<h3 id=\"faq-3\">Can I use umlauts in e-mail address checks?</h3>\n<p>No, umlauts are not allowed in any part of the e-mail address (username, domain name, or country ID) for e-mail address checks.</p>\n<p> </p>\n</article>",
    "user_segment_ids": []
}