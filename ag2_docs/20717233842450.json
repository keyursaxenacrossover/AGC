{
    "id": 20717233842450,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20717233842450.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20717233842450-High-Level-Requirements",
    "author_id": 369584192734,
    "comments_disabled": false,
    "draft": true,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20714711445138,
    "created_at": "2024-08-12T20:28:51Z",
    "updated_at": "2024-08-12T20:28:53Z",
    "name": "High Level Requirements",
    "title": "High Level Requirements",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-08-12T20:28:53Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<p><b>Original Confluence URL:</b> <a href=\"https://qbdocs.atlassian.net/wiki/spaces/IAM/pages/3782901767\">https://qbdocs.atlassian.net/wiki/spaces/IAM/pages/3782901767</a> - please cross-check the quality of the ZD article with the Confluence counterpart and remove this line before publishing the ZD article</p>\n\n<ac:task-list>\n<ac:task>\n<ac:task-id>1</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span class=\"placeholder-inline-tasks\"><ac:link><ri:user ri:account-id=\"5a5dc81217dfb4426b61f4c6\"></ri:user></ac:link> and <ac:link><ri:user ri:account-id=\"610813f58c15ca006f6152ca\"></ri:user></ac:link> please fill and/or validate especially the “shall/should/will” might be important when choosing a technology</span></ac:task-body>\n</ac:task>\n</ac:task-list><p></p><p><em><strong>shall </strong>= strongest, absolut must have; <strong>should </strong>= less strong, somehow necessary; <strong>will </strong>= nice to have</em></p><table data-layout=\"wide\" ac:local-id=\"86e537f6-2396-41ad-813a-e36a4ebd944c\">\n<colgroup>\n<col style=\"width: 75.0px;\">\n<col style=\"width: 251.0px;\">\n<col style=\"width: 631.0px;\">\n</colgroup>\n<tbody>\n<tr>\n<th><p><strong>ID</strong></p></th>\n<th><p><strong>Title</strong></p></th>\n<th><p><strong>Requirement</strong></p></th>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Reset Password</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a self service password reset for users by sending a password reset email to enable users to manage their credentials on their own.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>No password policies for IdP users</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>exclude users authenticating via an external identity provider from all kinds of password reminders or policies to ensure that users do not get confused.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>MFA</p></td>\n<td>\n<p>Tivian Access 2.0 <strong>shall </strong>provide two-factor authentication via e-mail or an authenticator app (common apps like Google Authenticator and Microsoft Authenticator shall be supported) to ensure customers can add additional security measurements.</p>\n<p>(supporting multi-factor authentication with more than 2 factors in one process is not mandatory; hardware tokens are just a nice to have)</p>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Sign-on with email and password</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a login for users using their email-address and password.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Sign-on with username and password</p></td>\n<td><p>Tivian Access 2.0 <strong>will </strong>provide a login for users using their username (not email) and password.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Password policies</p></td>\n<td>\n<p>Tivian Access 2.0 <strong>shall </strong>support password lifetime and password value policies to enable customers to project their security needs for our solution.</p>\n<p>This should include character and length based policies, password history and profile value policies.</p>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Password policy per tenant</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide password policies for individual tenants.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>MFA policy per tenant</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide MFA policies for individual tenants.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>MFA per user group</p></td>\n<td><p>Tivian Access 2.0 <strong>should </strong>provide MFA policies for groups of users to enable differentiation within one tenant.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Sign on-policy per tenant</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide sign-on policies for individual tenants containing token lifetime, session lifetime and reauthentication needs.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Password Breach Detection <br></p></td>\n<td>\n<p>The SSO provider <strong><u>will</u> </strong>implement a password breach detection mechanism to check whether a user's password has been compromised in a known data breach. The mechanism shall perform the following actions:</p>\n<ol start=\"1\">\n<li><p>Check the user's password hash against a database of known compromised passwords.</p></li>\n<li><p>Notify the user to reset their password if a match is found.</p></li>\n<li><p>Log the breach detection event and notify the SSO provider administrator.</p></li>\n</ol>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Logging for audits</p></td>\n<td>\n<p>The SSO solution <strong>should/shall </strong>provide monitoring and reporting capabilities that enable administrators to monitor usage, detect anomalies, and generate audit logs for compliance purposes.</p>\n<ac:task-list>\n<ac:task>\n<ac:task-id>2</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span class=\"placeholder-inline-tasks\">Check with <ac:link><ri:user ri:account-id=\"61011c5c3900e6007093d32f\"></ri:user></ac:link> </span></ac:task-body>\n</ac:task>\n</ac:task-list>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>User assigned to tenant</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>assign users to at least one tenant to ensure that the users is connected to the correct policies and applications/clients.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>User assigned to multiple tenants</p></td>\n<td>\n<p>Tivian Access 2.0 <strong>should </strong>provide a mechanism to assign users to multiple tenants to enable the case that a user exists for multiple customers (e.g. for Tivian internal users).</p>\n<p>If not possible other ways to give Tivian internal users to all installations have to be present.</p>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Domain based IdP routing</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a functionality to forward a federated user to their respective identity provider based on the email domain of the mail address provided by the user.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Direct federated forwarding</p></td>\n<td><p>Tivian Access 2.0 <strong>should </strong>provide a functionality to directly forward a user to their respective identity provider if the identity provider is known before.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Tenant information for application</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a unique tenant ID in all tokens provided for applications to enable the application to differentiate between tenants.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Basic user information for application</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide the email-adress of a user and the unique Tivian Access 2.0 identifier (e.g. a user ID) in all tokens provided for applications to enable the applications to uniquely identify a user.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>JIT provisioning</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide automatic provisioning of users when an unknown user logs in from a trusted external identity provider and assign that user to the correct tenant.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Deprovisioning</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>delete users automatically when they are not assigned to any application/client anymore.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>JIT update</p></td>\n<td>\n<p>Tivian Access 2.0 <strong>shall </strong>provide automatic updates of user data when a known users logs in from an external identity provider with a changed dataset.</p>\n<p>(automatic updates in the respective applictions are not part of this requirement)</p>\n</td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p>Little to no authorization</p></td>\n<td><p>Tivian Access 2.0 <strong>should </strong>provide only high level authorization information by providing the tenant ID and the users ID and the access to an application.</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>External SAML2 interface</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a SAML2 authentication interface for external identity providers to enable SSO/federation capabilities for customers connecting their own IdP. (Tivian Access is Service Provider and the external system Identity Provider)</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>External OIDC interface</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a OIDC authentication interface for external identity providers to enable SSO/federation capabilities for customers connecting their own IdP. (Tivian Access is Service Provider and the external system Identity Provider)</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>Internal OIDC interface</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a OIDC authentication interface for internal systems to enable SSO/authentication for internal systems. (Tivian Access is Identity Provider and the internal system Service Provider)</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>Seamless integration</p></td>\n<td>\n<p>Tivian Access 2.0 <strong>shall </strong>provide an interface for integrating Tivian internal systems.</p>\n<p>This especially means that CRUD operations for the following entities shall be present:</p>\n<ul>\n<li><p>Users</p></li>\n<li><p>Tenants</p></li>\n<li><p>Applications/Clients</p></li>\n<li><p>External Identity Providers</p></li>\n<li><p>Policies</p></li>\n</ul>\n</td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>Branded Web UI</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a way to customize the used colors and logo of the user facing UIs (like login, password reset, MFA etc.) to provide a Tivian branded version as well as customer specific versions of the Web UI.</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>Tivian Branded Email UI</p></td>\n<td><p>Tivian Access 2.0 <strong>shall </strong>provide a way to customize the used colors and logo of the user facing emails (like activation, password reset, etc.) to provide a Tivian branded version of emails.</p></td>\n</tr>\n<tr>\n<th data-highlight-colour=\"#ffffff\"><p></p></th>\n<td><p>Custom Email Relay</p></td>\n<td><p>Tivian Access 2.0 <strong>will </strong>provide a way to send emails using a configurable email server to send out email to ensure that existing IP allow-listing still works for customers.</p></td>\n</tr>\n</tbody>\n</table><p></p>",
    "user_segment_ids": [
        360000084973
    ]
}