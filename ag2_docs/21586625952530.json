{
    "id": 21586625952530,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/21586625952530.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/21586625952530-Generating-a-Report-of-Suspended-Survey-Responders-During-a-Specific-Time-Interval",
    "author_id": 1904316023094,
    "comments_disabled": false,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20234458963474,
    "created_at": "2024-09-25T09:24:19Z",
    "updated_at": "2024-09-25T10:11:18Z",
    "name": "Generating a Report of Suspended Survey Responders During a Specific Time Interval",
    "title": "Generating a Report of Suspended Survey Responders During a Specific Time Interval",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-09-25T10:11:17Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [
        "SQL",
        "Survey",
        "Report",
        "Excel",
        "Outage"
    ],
    "body": "<h1 id=\"h_01J8M8PJQEQ1KWQKG7M84N7XZ5\">Overview</h1>\n<p>Some installations may experience an error when navigating surveys for a certain period, possibly due to an outage. This can result in some survey responses being marked as \"suspended\" (status 22), meaning the survey was not completed. The goal is to generate a report that lists all the emails of survey responders whose surveys were suspended and who accessed the survey during a specific time interval (the time of the outage).</p>\n<h1 id=\"h_01J8M8PJQFGV6MR222HM6GK1QE\">Solution</h1>\n<p>The solution involves running a series of SQL queries embedded in shell scripts to extract data from different tables. These include <code>sample_data</code>, <code>panelists</code>, <code>project</code>, and installation-specific <code>users_&lt;PID+1&gt;</code> tables. The process consists of running different queries for various project types and then generating additional queries for specific installations using Excel.</p>\n<p>Below are the steps and example queries to generate the report:</p>\n<h3 id=\"h_01J8M8PJQF8V4990CDFXVDXY7Y\">Steps</h3>\n<h4 id=\"h_01J8M8PJQFDRQ3RQRQ2QHGTY1G\"><strong>Step 1: Query 1 to Get Panelist Data for PA/MD Projects (Panel and Master data surveys)</strong></h4>\n<p>The first step is to fetch the information for PA/MD projects, which includes project types 23 and 38, along with the email addresses.</p>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative\">\n<div class=\"flex items-center text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9\"> </div>\n<pre class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-bash\">clear &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"cluster;technical_name;project_id;project_title;project_type;last_page;page_title;user_id;u_email\"</span> &amp;&amp; <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <strong>INSTALLATION_NAMES</strong>; <span class=\"hljs-keyword\">do</span> \n<span class=\"hljs-built_in\">cd</span> /nfs/installations/<span class=\"hljs-variable\">$i</span>/nfs/opst/<span class=\"hljs-variable\">$i</span>.customervoice360.com/htdocs/ 2&gt; /dev/null &amp;&amp; \n(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"SET SQL_BIG_SELECTS=1; \nSELECT CONCAT_WS(';', sd.pid, p.ptitle, p.ptyp, sd.last_page, pg.pgtitle, sd.uid, pl.u_email) \nFROM sample_data AS sd \nLEFT JOIN project AS p ON (sd.pid = p.pid) \nLEFT JOIN page AS pg ON (sd.last_page = pg.pgid) \nLEFT JOIN panelists AS pl ON (sd.uid = pl.uid) \nWHERE sd.status = 22 \nAND sd.date_of_first_access &gt; '<strong>START_TIMESTAMP</strong>' \nAND sd.date_of_first_access &lt; '<strong>END_TIMESTAMP</strong>' \nAND p.ptyp IN (23, 38);\"</span> | efslogin -mo) 2&gt; /dev/null | \nawk -v cluster=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(hostname | sed 's/servicegw-//g;s/^s/S/g;s/^p/P/g;s/bofa/BofA/g;s/-de-/-DE-/g;s/-us-/-US-/g')</span>\"</span> -v inst=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>\"</span> <span class=\"hljs-string\">'NR&gt;3 { OFS=\";\"; print cluster, inst, $0 | \"sort -n | uniq\" }'</span>; \n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n</div>\n<p><strong>Placeholders:</strong></p>\n<ul>\n<li>\n<code>INSTALLATION_NAMES</code>: Replace with the list of installations, space separated (e.g., <code>rt4601 ax9072 ee0080</code>).</li>\n<li>\n<code>START_TIMESTAMP</code>: Replace with the start of the time interval, GMT time (e.g., <code>'2024-09-17 06:00:00'</code>).</li>\n<li>\n<code>END_TIMESTAMP</code>: Replace with the end of the time interval GMT time (e.g., <code>'2024-09-17 22:00:00'</code>).</li>\n</ul>\n<h4 id=\"h_01J8M8PJQFTREMTT3F4PN3N879\"><strong>Step 2: Query 2 to Get Data for PE/AN Projects (Personalized surveys and Anonymous surveys)</strong></h4>\n<p>This query retrieves data for personalized (PE) and anonymous (AN) surveys. It does not include email addresses and applies similar filters as Query 1, but it excludes project types 23 and 38.</p>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative\">\n<pre class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-bash\">clear &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"cluster;technical_name;project_id;project_title;project_type;last_page;page_title;user_id\"</span> &amp;&amp; <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <strong>INSTALLATION_NAMES</strong>; <span class=\"hljs-keyword\">do</span> \n<span class=\"hljs-built_in\">cd</span> /nfs/installations/<span class=\"hljs-variable\">$i</span>/nfs/opst/<span class=\"hljs-variable\">$i</span>.customervoice360.com/htdocs/ 2&gt; /dev/null &amp;&amp; \n(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"SET SQL_BIG_SELECTS=1; \nSELECT CONCAT_WS(';', sd.pid, p.ptitle, p.ptyp, sd.last_page, pg.pgtitle, sd.uid) \nFROM sample_data AS sd \nLEFT JOIN project AS p ON (sd.pid = p.pid) \nLEFT JOIN page AS pg ON (sd.last_page = pg.pgid) \nWHERE sd.status = 22 \nAND sd.date_of_first_access &gt; '<strong>START_TIMESTAMP</strong>' \nAND sd.date_of_first_access &lt; '<strong>END_TIMESTAMP</strong>' \nAND p.ptyp NOT IN (23, 38);\"</span> | efslogin -mo) 2&gt; /dev/null | \nawk -v cluster=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(hostname | sed 's/servicegw-//g;s/^s/S/g;s/^p/P/g;s/bofa/BofA/g;s/-de-/-DE-/g;s/-us-/-US-/g')</span>\"</span> -v inst=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>\"</span> <span class=\"hljs-string\">'NR&gt;3 { OFS=\";\"; print cluster, inst, $0 | \"sort -n | uniq\" }'</span>; \n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n</div>\n<p><strong>Placeholders:</strong></p>\n<ul>\n<li>Same placeholders for <code>INSTALLATION_NAMES</code>, <code>START_TIMESTAMP</code>, and <code>END_TIMESTAMP</code> as in Query 1.</li>\n</ul>\n<h4 id=\"h_01J8M8PJQFDS5R1WFG6KA0AHZM\"><strong>Step 3: Generate Queries for PE Projects (Query 3 to End)</strong></h4>\n<p>For each <code>pid</code> found in Query 2, run additional queries on the installation-specific <code>users_&lt;pid+1&gt;</code> tables to fetch email addresses.</p>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative\">\n<div class=\"flex items-center text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9\"> </div>\n<pre class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-bash\">clear &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"cluster;technical_name;uid;user_id;u_email\"</span> &amp;&amp; <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <strong>INSTALLATION_NAME</strong>; <span class=\"hljs-keyword\">do</span> \n<span class=\"hljs-built_in\">cd</span> /nfs/installations/<span class=\"hljs-variable\">$i</span>/nfs/opst/<span class=\"hljs-variable\">$i</span>.customervoice360.com/htdocs/ 2&gt; /dev/null &amp;&amp; \n(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"SELECT CONCAT_WS(';', '<strong>PID1</strong>', uid, u_email) FROM users_<strong>PID1</strong>+1; \nSELECT CONCAT_WS(';', '<strong>PID2</strong>', uid, u_email) FROM users_<strong>PID2</strong>+1;\"</span> | efslogin -mo) 2&gt; /dev/null | \nawk -v cluster=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(hostname | sed 's/servicegw-//g;s/^s/S/g;s/^p/P/g;s/bofa/BofA/g;s/-de-/-DE-/g;s/-us-/-US-/g')</span>\"</span> -v inst=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>\"</span> <span class=\"hljs-string\">'NR&gt;3 { OFS=\";\"; print cluster, inst, $0 | \"sort -n | uniq\" }'</span>; \n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n</div>\n<p><strong>Placeholders:</strong></p>\n<ul>\n<li>\n<code>INSTALLATION_NAME</code>: Replace with the <strong>specific (single)</strong> installation name from Query 2 (e.g., <code>ax9072</code>).</li>\n<li>\n<code>PID1</code>, <code>PID2</code>, etc.: Replace with the <code>pid</code> values from Query 2 and increment by 1 in the From clause. For example, if the <code>pid</code> is 14261 in Query 2, the query will be <code><code class=\"!whitespace-pre hljs language-bash\"><span class=\"hljs-string\">SELECT CONCAT_WS(';', '14261', uid, u_email) FROM users_14262</span></code></code>.<br>Note that if an installation has 10 distinct PIDs, then the query for this installation will have 10 sub-select statements as shown in the example above.</li>\n<li>Repeat this for each installation and <code style=\"font-size: 15px;\">pid</code> combination from Query 2.</li>\n<li>You can use Excel formulas to generate the queries, or work on a further script to generate the queries based on PID and installation name values. </li>\n</ul>\n<div class=\"dark bg-gray-950 contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative\">\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">Eventually, concatenate the results of Query 1 and Queries 3 to the end to generate the report.<br><br>\n</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">Check this sample set of queries used by the legacy team in a previous outage (not a complete list for Query 3 to End): <a href=\"https://docs.google.com/document/d/1WXLbmTjzvaL9NiMzPZWfGRLXCt-m2MUAVB0SKvVuGeE/edit\">Commands ran for KANTAR affected user list</a>\n</div>\n</div>\n<h1 id=\"h_01J8M82T5J9TFBBC284BWHJAMC\">Summary</h1>\n<p>By following these steps and running the provided queries, you can generate a report of suspended survey responders and their emails within a specific time interval. You will need to run Query 1 and Query 2 first to gather the necessary information, then proceed with Query 3 to extract email data for personalized surveys (PE) (results of Query 2).</p>\n<p> </p>\n<h2 id=\"h_01J8M82T5J12R90C5TPHXZBT30\">FAQ</h2>\n<p><strong>Q: What tables are involved in generating the report?</strong><br>A: The tables involved include 'sample_data', 'panelists', 'project', and 'users_(PID+1)'.</p>\n<p><strong>Q: What is the 'suspended' status in the context of survey responses?</strong><br>A: The 'suspended' status refers to survey responses that are not complete, possibly due to an outage or error during navigation in the survey, but might also be due to a user not completing the survey.</p>\n<p><strong>Q: How are the email addresses for PE projects obtained?</strong><br>A: The email addresses for PE projects are obtained by running a series of SQL queries and then using Excel to join the email addresses.</p>",
    "user_segment_ids": [
        360000084973
    ]
}