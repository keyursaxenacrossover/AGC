{
    "id": 20714915556242,
    "url": "https://discoverxi-supportdesk.zendesk.com/api/v2/help_center/en-us/articles/20714915556242.json",
    "html_url": "https://discoverxi-supportdesk.zendesk.com/hc/en-us/articles/20714915556242-Using-the-okta-cli-tool",
    "author_id": 369584192734,
    "comments_disabled": false,
    "draft": false,
    "promoted": false,
    "position": 0,
    "vote_sum": 0,
    "vote_count": 0,
    "section_id": 20714530860562,
    "created_at": "2024-08-12T17:06:12Z",
    "updated_at": "2024-09-10T11:19:22Z",
    "name": "Using the okta-cli tool",
    "title": "Using the okta-cli tool",
    "source_locale": "en-us",
    "locale": "en-us",
    "outdated": false,
    "outdated_locales": [],
    "edited_at": "2024-09-10T11:19:21Z",
    "user_segment_id": 360000084973,
    "permission_group_id": 1075294,
    "content_tag_ids": [],
    "label_names": [],
    "body": "<h1 id=\"h_01J7DTEG7ZXWEAJHD1KRW3DKWQ\">Overview</h1>\n<p><code>okta-cli</code> is a python-based CLI tool for Okta.</p>\n<p>It basically is a CLI wrapper around the <a href=\"https://developer.okta.com/docs/reference/\">Okta REST API</a>.</p>\n<p><strong>NOTE:</strong> This is <em>not</em> the same as Okta's own <code>okta</code> CLI interface. The latter is apparently used for setting up the source for development projects, for more information visit <a href=\"https://cli.okta.com/manual/\">https://cli.okta.com/manual/</a></p>\n<h2 id=\"h_01J7DTDKPE92SHJBF10FBMSWPF\">Table of Contents</h2>\n<ul>\n<li>\n<a href=\"#header-1\">Requirements</a>\n<ul>\n<li>\n<a href=\"#header-3\">Installation</a>\n<ul>\n<li><a href=\"#header-5\">Mac &amp; homebrew</a></li>\n<li><a href=\"#header-6\">Linux / Linux subsystem</a></li>\n<li><a href=\"#header-7\">resolving issues during installation</a></li>\n</ul>\n</li>\n<li><a href=\"#header-9\">Quickstart</a></li>\n<li><a href=\"#header-10\">Examples</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"header-1\">Requirements</h1>\n<ul>\n<li>\n<p>A Mac or Linux machine, it <em>might</em> work on Windows (untested)</p>\n</li>\n<li>\n<p>Python 3.7+</p>\n</li>\n<li>\n<p>unfortunately <strong>Python 3.11 is not </strong><em><strong>yet</strong></em><strong> supported</strong> due to a dependency.</p>\n</li>\n</ul>\n<h2 id=\"header-3\">Installation</h2>\n<h3 id=\"header-5\">Mac &amp; homebrew</h3>\n<pre><code class=\"language-text\">brew tap flypenguin/okta-cli\nbrew install okta-cli</code></pre>\n<h3 id=\"header-6\">Linux / Linux subsystem</h3>\n<ul>\n<li>\n<p>create a python virtualenv: <code>mkvirtualenv okta-cli</code></p>\n</li>\n<li>\n<p><code>pip install okta-cli</code></p>\n</li>\n<li>\n<p>start using it: <code>okta-cli config new</code></p>\n<ul>\n<li>\n<p>Name: eg. Tivian</p>\n</li>\n<li>\n<p>URL: eg. <a href=\"https://tivian-admin.okta.com/\">https://tivian-admin.okta.com/</a></p>\n</li>\n<li>\n<p>API-Key: create new personal API key or use existing for existing OKTA tenant</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Create a new environment, for that you need <code>virtualenv</code> and <code>virtualenvwrapper</code> to be installed properly and set up in your system. The <code>mkvirtualenv</code> command is provided by <code>virtualenvwrapper</code>, which is a set of extensions to <code>virtualenv</code> for creating and deleting additional environments.</p>\n<p>Here's how you can install and set up <code>virtualenv</code> and <code>virtualenvwrapper</code>:</p>\n<ol start=\"1\">\n<li>\n<p>First, install <code>pip</code> if you haven't already. <code>pip</code> is a package manager for Python. You can install it via:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">sudo apt update\nsudo apt install python3-pip</code></pre>\n<ol start=\"2\">\n<li>\n<p>Then, install <code>virtualenv</code> using <code>pip</code>:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">pip3 install virtualenv</code></pre>\n<ol start=\"3\">\n<li>\n<p>Install <code>virtualenvwrapper</code>:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">pip3 install virtualenvwrapper</code></pre>\n<ol start=\"4\">\n<li>\n<p>Add the following lines to your shell startup file (<code>~/.bashrc</code>, <code>~/.profile</code>, or <code>~/.zshrc</code>):</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">export WORKON_HOME=$HOME/.virtualenvs\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/local/python3   # This needs to be the path where python3 is installed\nsource /usr/local/bin/virtualenvwrapper.sh</code></pre>\n<ol start=\"5\">\n<li>\n<p>Load the changes you made to your shell startup file. For example, if you added those lines to <code>~/.bashrc</code>, you'd run:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">source ~/.bashrc</code></pre>\n<ol start=\"6\">\n<li>\n<p>Now, you should be able to create a new virtual environment using <code>mkvirtualenv</code>:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">mkvirtualenv okta-cli</code></pre>\n<ol start=\"7\">\n<li>\n<p>And you can install the <code>okta-cli</code> tool within this virtual environment:</p>\n</li>\n</ol>\n<pre><code class=\"language-text\">pip install okta-cli</code></pre>\n<p>Then you can start using <code>okta-cli</code> by running:</p>\n<pre><code class=\"language-text\">okta-cli config new</code></pre>\n<p>If you close your terminal and want to use the <code>okta-cli</code> again, you'll need to activate the <code>okta-cli</code> virtual environment again using:</p>\n<p><code>storck@GP-L-0666:~$ workon okta-cli</code></p>\n<h3 id=\"header-7\">Resolving issues during installation</h3>\n<p>If the path to the <code>virtualenvwrapper.sh</code> script in <code>~/.bashrc</code> is not correctly set in your system, try this:</p>\n<p>To find the correct path, you can use the <code>locate</code> command. First, update the <code>locate</code> database:</p>\n<pre><code class=\"language-text\">sudo updatedb</code></pre>\n<p>Then use <code>locate</code> to find <code>virtualenvwrapper.sh</code>:</p>\n<pre><code class=\"language-text\">locate virtualenvwrapper.sh</code></pre>\n<p>This should return the path to <code>virtualenvwrapper.sh</code>. If it doesn't, you may need to reinstall <code>virtualenvwrapper</code>.</p>\n<p>If <code>locate</code> does return a path, replace <code>/usr/local/bin/virtualenvwrapper.sh</code> in your <code>.bashrc</code> file with the correct path and source your <code>.bashrc</code> file again.</p>\n<h2 id=\"header-9\">Quickstart</h2>\n<p>Every more complex function should have help texts available: <code>okta-cli users add -h</code>, or maybe <code>okta-cli users update -h</code> or maybe <code>okta-cli apps add -h</code> ... those are probably the most interesting ones.</p>\n<pre><code class=\"language-text\">$ pip install okta-cli                                # install :)\n$ okta-cli config new \\                               # create a new okta profile\n           -n my-profile -\\\n           -u https://my.okta.url \\\n           -t API_TOKEN\n$ okta-cli users list \\                               # search users with a query\n           -f 'profile.email eq \"my@email.com\"'\n$ okta-cli features list                              # list okta server-side features\n$ okta-cli features enable \"Recent Activity\"          # enable an Okta feature\n$ okta cli users groups adduser \\                     # add a user to a group\n           -g app1_rollout \\\n           -u fred.flintstone@flintstones.com\n$ okta-cli apps adduser \\                             # assign an app to a user\n           -a my_app_name -u 0109121 \\\n           -f profile.employeeId\n$ okta-cli users update id012345678 \\                 # update a field of a user record\n           --set profile.email=my@other.email.com\n$ okta-cli users bulk-update update-list.xlsx         # CSV is okay as well :)\n$ okta-cli version                                    # print version and exit\n$ okta-cli users get my-login -vvvvv                  # see http debug output</code></pre>\n<h2 id=\"header-10\">Examples</h2>\n<p>You can get examples using the build-in Okta CLI helper, for commands and subcommands help try:</p>\n<pre><code class=\"language-text\">(okta-cli) storck@GP-L-0666:~$ okta-cli -h\nUsage: okta-cli [OPTIONS] COMMAND [ARGS]...\n\n  Okta CLI helper.\n\n  See subcommands for help: \"okta-cli users --help\" etc.\n\n  If in doubt start with: \"okta-cli config new --help\"\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  apps        Application operations\n  config      Manage okta-cli configuration\n  dump        Dump basically everything into CSV files for further...\n  eventhooks  Event hook operations\n  features    Feature operations\n  groups      Group operations\n  pw          Manage passwords\n  raw         Perform a request against the specified API endpoint\n  users       Add, update (etc.) users\n  version     Print version number and exit</code></pre>\n<pre><code class=\"language-text\">(okta-cli) storck@GP-L-0666:~$ okta-cli users list -h\nUsage: okta-cli users list [OPTIONS]\n\n  Lists users (all or using various filters)\n\n  NOTES:\n  * Does not contain deprovisioned users.\n  * '-q' is fast but case-sensitive search over multiple fields\n  * '-m' is a slow but case insensitive on a SINGLE field\n\n  EXAMPLES:\n  okta-cli users list -q MÃ¼ller -m firstName=Hans\n  okta-cli users list -f 'profile.site eq \"Berlin\"'\n\n  This is equivalent:\n  okta-cli users list -s 'status eq \"DEPROVISIONED\"'\n  okta-cli users list -d\n\n  See here for more info:\n      https://is.gd/RrYDOY\n\nOptions:\n  -m, --match FIELD=VALUE  Filter for field values\n  -p, --partial            Accept partial matches for match queries.\n  -f, --filter TEXT        Add Okta filter query\n  -s, --search TEXT        Add Okta search query\n  -q, --query TEXT         Add Okta query string\n  -d, --deprovisioned      Return only deprovisioned users\n  -j, --json               Print raw JSON output\n  -y, --yaml               Print raw YAML output\n  --csv                    Print output as CSV format. Will ignore --output-\n                           fields parameter if set\n  --csv-dialect TEXT       Use this CSV dialect with CSV output\n  --output-fields TEXT     Override default fields in table format\n  --colwidth INTEGER       Limit column width; default: unlimited\n  -v, --verbose            Increase verbosity (-vvvvv for full DEBUG logging)\n  -h, --help               Show this message and exit.</code></pre>",
    "user_segment_ids": [
        360000084973
    ]
}